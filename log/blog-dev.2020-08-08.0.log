2020-08-08 20:56:39.411  INFO 5064 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 5064 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 20:56:39.421 DEBUG 5064 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 20:56:39.421  INFO 5064 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 20:56:39.451  INFO 5064 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 20:56:39.451  INFO 5064 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 20:56:40.031  INFO 5064 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 20:56:40.031  INFO 5064 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 20:56:40.061  INFO 5064 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 Redis repository interfaces.
2020-08-08 20:56:40.141  WARN 5064 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 20:56:40.491  INFO 5064 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 20:56:40.501  INFO 5064 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 20:56:40.501  INFO 5064 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 20:56:40.574  INFO 5064 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 20:56:40.575  INFO 5064 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1124 ms
2020-08-08 20:56:41.238  INFO 5064 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 20:56:41.288  INFO 5064 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 20:56:41.338  INFO 5064 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 20:56:41.338  INFO 5064 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 20:56:41.338  INFO 5064 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 20:56:41.338  INFO 5064 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 20:56:41.478  INFO 5064 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 20:56:41.508  INFO 5064 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 20:56:41.518  INFO 5064 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.605 seconds (JVM running for 3.616)
2020-08-08 20:56:41.528  INFO 5064 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 20:56:41.848  INFO 5064 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 20:56:41.848 DEBUG 5064 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 20:56:41.858 DEBUG 5064 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 20:56:41.888  INFO 5064 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-08 20:56:41.898 ERROR 5064 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.flexia.SpringBootBlogApplication.main(SpringBootBlogApplication.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for com.dsy.blog.mapper.TypeMapper.selectTypeById
### The error may exist in com/flexia/mapper/BlogMapper.java (best guess)
### The error may involve com.flexia.mapper.BlogMapper.findAllBlog
### The error occurred while handling results
### SQL: select * from blog order by update_time desc
### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for com.dsy.blog.mapper.TypeMapper.selectTypeById
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy72.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:223)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy85.findAllBlog(Unknown Source)
	at com.flexia.config.SetupRunner.run(SetupRunner.java:30)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:795)
	... 10 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for com.dsy.blog.mapper.TypeMapper.selectTypeById
### The error may exist in com/flexia/mapper/BlogMapper.java (best guess)
### The error may involve com.flexia.mapper.BlogMapper.findAllBlog
### The error occurred while handling results
### SQL: select * from blog order by update_time desc
### Cause: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for com.dsy.blog.mapper.TypeMapper.selectTypeById
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 19 common frames omitted
Caused by: java.lang.IllegalArgumentException: Mapped Statements collection does not contain value for com.dsy.blog.mapper.TypeMapper.selectTypeById
	at org.apache.ibatis.session.Configuration$StrictMap.get(Configuration.java:1009)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:799)
	at org.apache.ibatis.session.Configuration.getMappedStatement(Configuration.java:792)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getNestedQueryMappingValue(DefaultResultSetHandler.java:782)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getPropertyMappingValue(DefaultResultSetHandler.java:504)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.applyPropertyMappings(DefaultResultSetHandler.java:480)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.getRowValue(DefaultResultSetHandler.java:404)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValuesForSimpleResultMap(DefaultResultSetHandler.java:354)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleRowValues(DefaultResultSetHandler.java:328)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSet(DefaultResultSetHandler.java:301)
	at org.apache.ibatis.executor.resultset.DefaultResultSetHandler.handleResultSets(DefaultResultSetHandler.java:194)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:79)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:63)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:108)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61)
	at com.sun.proxy.$Proxy105.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	... 25 common frames omitted

2020-08-08 20:56:42.060  INFO 5064 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-08 20:56:42.060  INFO 5064 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-08-08 20:56:42.070  INFO 5064 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-08-08 20:57:56.282  INFO 12772 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 12772 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 20:57:56.292 DEBUG 12772 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 20:57:56.292  INFO 12772 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 20:57:56.312  INFO 12772 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 20:57:56.312  INFO 12772 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 20:57:56.782  INFO 12772 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 20:57:56.792  INFO 12772 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 20:57:56.812  INFO 12772 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-08-08 20:57:56.882  WARN 12772 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 20:57:57.192  INFO 12772 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 20:57:57.202  INFO 12772 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 20:57:57.202  INFO 12772 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 20:57:57.252  INFO 12772 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 20:57:57.252  INFO 12772 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 940 ms
2020-08-08 20:57:57.822  INFO 12772 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 20:57:57.872  INFO 12772 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 20:57:57.912  INFO 12772 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 20:57:57.912  INFO 12772 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 20:57:57.922  INFO 12772 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 20:57:57.922  INFO 12772 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 20:57:58.062  INFO 12772 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 20:57:58.082  INFO 12772 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 20:57:58.092  INFO 12772 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.095 seconds (JVM running for 2.762)
2020-08-08 20:57:58.112  INFO 12772 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 20:57:58.312  INFO 12772 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 20:57:58.322 DEBUG 12772 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 20:57:58.332 DEBUG 12772 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 20:57:58.352 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 20:57:58.352 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 20:57:58.352 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 20:57:58.362 DEBUG 12772 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 20:57:58.362 DEBUG 12772 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 20:57:58.362 DEBUG 12772 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 20:57:58.362 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 20:57:58.362 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 20:57:58.372 DEBUG 12772 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 20:57:58.382  INFO 12772 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-08 20:57:58.382 ERROR 12772 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.flexia.SpringBootBlogApplication.main(SpringBootBlogApplication.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.lang.IllegalArgumentException: non null hash key required
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.redis.core.AbstractOperations.rawHashKey(AbstractOperations.java:162)
	at org.springframework.data.redis.core.DefaultHashOperations.put(DefaultHashOperations.java:188)
	at com.flexia.config.SetupRunner.run(SetupRunner.java:32)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:795)
	... 10 common frames omitted

2020-08-08 20:57:58.517  INFO 12772 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-08 20:57:58.517  INFO 12772 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-08-08 20:57:58.527  INFO 12772 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-08-08 21:00:24.904  INFO 11520 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 11520 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:00:24.904 DEBUG 11520 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:00:24.904  INFO 11520 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:00:24.934  INFO 11520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:00:24.934  INFO 11520 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:00:25.404  INFO 11520 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:00:25.404  INFO 11520 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:00:25.424  INFO 11520 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-08-08 21:00:25.494  WARN 11520 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:00:25.810  INFO 11520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:00:25.810  INFO 11520 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:00:25.810  INFO 11520 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:00:25.870  INFO 11520 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:00:25.870  INFO 11520 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 936 ms
2020-08-08 21:00:26.440  INFO 11520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:00:26.500  INFO 11520 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:00:26.540  INFO 11520 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:00:26.540  INFO 11520 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:00:26.540  INFO 11520 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:00:26.540  INFO 11520 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:00:26.690  INFO 11520 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:00:26.720  INFO 11520 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:00:26.730  INFO 11520 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.105 seconds (JVM running for 2.763)
2020-08-08 21:00:26.750  INFO 11520 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:00:26.940  INFO 11520 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:00:26.950 DEBUG 11520 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:00:26.960 DEBUG 11520 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:00:26.980 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:00:26.990 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:00:27.000 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:00:27.000 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:00:27.000 DEBUG 11520 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:00:27.000 DEBUG 11520 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:00:27.000  INFO 11520 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-08 21:00:27.010 ERROR 11520 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

java.lang.IllegalStateException: Failed to execute CommandLineRunner
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:798)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:779)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.flexia.SpringBootBlogApplication.main(SpringBootBlogApplication.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.lang.IllegalArgumentException: non null hash key required
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.redis.core.AbstractOperations.rawHashKey(AbstractOperations.java:162)
	at org.springframework.data.redis.core.DefaultHashOperations.put(DefaultHashOperations.java:188)
	at com.flexia.config.SetupRunner.run(SetupRunner.java:32)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:795)
	... 10 common frames omitted

2020-08-08 21:00:27.141  INFO 11520 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-08 21:00:27.141  INFO 11520 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-08-08 21:00:27.161  INFO 11520 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-08-08 21:01:35.841  INFO 7532 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 7532 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:01:35.841 DEBUG 7532 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:01:35.841  INFO 7532 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:01:35.871  INFO 7532 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:01:35.871  INFO 7532 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:01:36.341  INFO 7532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:01:36.341  INFO 7532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:01:36.371  INFO 7532 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-08-08 21:01:36.441  WARN 7532 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:01:36.751  INFO 7532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:01:36.761  INFO 7532 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:01:36.761  INFO 7532 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:01:36.811  INFO 7532 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:01:36.811  INFO 7532 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 940 ms
2020-08-08 21:01:37.381  INFO 7532 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:01:37.421  INFO 7532 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:01:37.471  INFO 7532 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:01:37.471  INFO 7532 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:01:37.471  INFO 7532 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:01:37.471  INFO 7532 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:01:37.598  INFO 7532 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:01:37.628  INFO 7532 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:01:37.638  INFO 7532 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.078 seconds (JVM running for 2.71)
2020-08-08 21:01:37.648  INFO 7532 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:01:37.858  INFO 7532 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:01:37.868 DEBUG 7532 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:01:37.878 DEBUG 7532 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:01:37.908 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:01:37.918 DEBUG 7532 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:01:38.368  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:01:38.368  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:01:38.368  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:01:38.368  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:01:38.368  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:01:38.378  INFO 7532 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:01:50.650  INFO 7532 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-08 21:01:50.651  INFO 7532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-08-08 21:01:50.658  INFO 7532 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-08-08 21:01:50.731 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==>  Preparing: SELECT count(0) FROM blog
2020-08-08 21:01:50.731 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==> Parameters: 
2020-08-08 21:01:50.733 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : <==      Total: 1
2020-08-08 21:01:50.734 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog LIMIT ?
2020-08-08 21:01:50.735 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.743 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : <==      Total: 5
2020-08-08 21:01:50.746 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.746 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.747 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.769 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.770 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.773 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:01:50.775 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.776 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.780 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.781 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.781 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.781 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.782 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.782 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.782 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.783 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.783 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.784 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.785 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.785 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.786 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:01:50.786 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.787 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.788 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.789 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.789 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.789 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.790 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.790 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.791 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.791 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.791 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.792 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.793 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.793 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:01:50.793 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.794 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.794 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.795 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.795 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.796 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.796 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.797 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.797 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.798 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.798 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.798 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:01:50.799 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.799 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.799 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:01:50.800 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.800 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.800 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.801 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.801 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.802 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.802 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.803 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.803 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.804 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.804 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.804 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:01:50.805 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.806 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.806 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.807 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.809 DEBUG 7532 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==>  Preparing: select distinct type.*, count(blog.blog_id) as blogNum from type left join blog on type.type_id = blog.type_id group by type.type_id order by blogNum desc limit ?
2020-08-08 21:01:50.809 DEBUG 7532 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==> Parameters: 10(Integer)
2020-08-08 21:01:50.812 DEBUG 7532 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : <==      Total: 6
2020-08-08 21:01:50.812 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.813 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: JavaSE(String)
2020-08-08 21:01:50.814 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.814 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.815 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.819 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 2
2020-08-08 21:01:50.820 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.820 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.821 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.821 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.821 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:01:50.822 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.822 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.823 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:01:50.823 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.823 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.823 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.824 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.824 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.824 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.825 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.826 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.826 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.827 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.827 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.827 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:01:50.828 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.828 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.828 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.829 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.829 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.829 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringBoot(String)
2020-08-08 21:01:50.830 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.831 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.831 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.831 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:01:50.832 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.832 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.832 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.833 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.833 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.833 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:01:50.833 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.834 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.834 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.834 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.834 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.835 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.835 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.835 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.836 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.836 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.836 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: Spring(String)
2020-08-08 21:01:50.836 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.837 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.837 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.838 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:01:50.838 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.838 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.839 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.839 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.839 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.840 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:01:50.840 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.840 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:01:50.841 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.841 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.841 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.842 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.842 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.842 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.842 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.843 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.843 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: 数据库(String)
2020-08-08 21:01:50.843 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.844 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.844 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.845 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:01:50.846 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:01:50.846 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.846 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.847 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:01:50.847 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:01:50.847 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:01:50.847 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:01:50.848 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:01:50.848 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:01:50.848 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:01:50.848 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:01:50.849 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:01:50.849 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.849 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringMVC(String)
2020-08-08 21:01:50.850 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.850 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.850 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 3(Integer)
2020-08-08 21:01:50.851 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:01:50.851 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:01:50.851 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: MyBatis(String)
2020-08-08 21:01:50.852 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:01:50.855 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:01:50.855 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 4(Integer)
2020-08-08 21:01:50.856 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:01:50.856 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==>  Preparing: select distinct tag.*, count(blog_tag.blog_id) as blogNum from tag left join blog_tag on tag.tag_id = blog_tag.tag_id group by tag.tag_id order by blogNum desc limit ?
2020-08-08 21:01:50.856 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==> Parameters: 10(Integer)
2020-08-08 21:01:50.858 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : <==      Total: 7
2020-08-08 21:01:50.859 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:01:50.859 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 学习笔记(String)
2020-08-08 21:01:50.860 DEBUG 7532 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:01:50.860 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:01:50.860 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:01:50.862 DEBUG 7532 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:01:50.877 ERROR 7532 --- [http-nio-8080-exec-1] c.f.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @7cf9e661)
2020-08-08 21:01:50.881  WARN 7532 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @7cf9e661)]
2020-08-08 21:05:21.392  INFO 8884 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 8884 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:05:21.392 DEBUG 8884 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:05:21.392  INFO 8884 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:05:21.422  INFO 8884 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:05:21.422  INFO 8884 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:05:21.892  INFO 8884 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:05:21.892  INFO 8884 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:05:21.912  INFO 8884 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-08-08 21:05:21.982  WARN 8884 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:05:22.282  INFO 8884 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:05:22.292  INFO 8884 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:05:22.292  INFO 8884 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:05:22.352  INFO 8884 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:05:22.352  INFO 8884 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 930 ms
2020-08-08 21:05:22.929  INFO 8884 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:05:22.979  INFO 8884 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:05:23.019  INFO 8884 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:05:23.019  INFO 8884 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:05:23.019  INFO 8884 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:05:23.019  INFO 8884 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:05:23.169  INFO 8884 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:05:23.199  INFO 8884 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:05:23.209  INFO 8884 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.098 seconds (JVM running for 2.741)
2020-08-08 21:05:23.219  INFO 8884 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:05:23.419  INFO 8884 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:05:23.429 DEBUG 8884 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:05:23.439 DEBUG 8884 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:05:23.459 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:05:23.459 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:05:23.459 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:05:23.469 DEBUG 8884 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:05:23.889  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:05:23.889  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:05:23.899  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:05:23.899  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:05:23.899  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:05:23.905  INFO 8884 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:05:33.542  INFO 8884 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-08 21:05:33.543  INFO 8884 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-08-08 21:05:33.549  INFO 8884 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
2020-08-08 21:05:33.594 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==>  Preparing: SELECT count(0) FROM blog
2020-08-08 21:05:33.594 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==> Parameters: 
2020-08-08 21:05:33.596 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : <==      Total: 1
2020-08-08 21:05:33.597 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog LIMIT ?
2020-08-08 21:05:33.597 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.605 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : <==      Total: 5
2020-08-08 21:05:33.608 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.608 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.609 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.629 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.630 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.631 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:05:33.633 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.633 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.634 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.635 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.635 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.635 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.636 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.636 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.636 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.637 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.637 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.637 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.638 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.638 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.639 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:05:33.639 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.640 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.641 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.642 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.642 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.643 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.643 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.644 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.644 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.645 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.645 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.646 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.646 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.647 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:05:33.647 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.648 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.648 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.649 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.649 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.649 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.650 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.651 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.651 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.651 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.652 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.652 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:05:33.653 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.653 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.653 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:05:33.654 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.654 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.654 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.655 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.655 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.655 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.655 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.656 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.656 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.657 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.657 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.657 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:05:33.658 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.658 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.658 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.659 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.661 DEBUG 8884 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==>  Preparing: select distinct type.*, count(blog.blog_id) as blogNum from type left join blog on type.type_id = blog.type_id group by type.type_id order by blogNum desc limit ?
2020-08-08 21:05:33.662 DEBUG 8884 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==> Parameters: 10(Integer)
2020-08-08 21:05:33.663 DEBUG 8884 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : <==      Total: 6
2020-08-08 21:05:33.663 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.663 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: JavaSE(String)
2020-08-08 21:05:33.664 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.665 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.665 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.670 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 2
2020-08-08 21:05:33.670 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.670 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.671 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.671 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.671 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:05:33.672 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.672 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.672 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:05:33.673 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.673 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.673 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.673 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.674 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.674 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.674 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.675 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.676 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.676 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.677 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.677 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:05:33.678 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.678 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.678 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.679 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.679 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.679 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringBoot(String)
2020-08-08 21:05:33.680 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.680 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.681 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.681 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:05:33.682 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.682 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.682 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.683 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.683 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.683 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:05:33.683 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.683 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.684 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.684 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.684 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.685 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.685 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.685 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.685 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.686 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.686 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: Spring(String)
2020-08-08 21:05:33.686 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.687 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.687 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.688 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:05:33.688 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.688 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.688 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.689 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.689 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.690 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:05:33.690 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.690 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:05:33.690 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.691 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.691 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.691 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.691 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.692 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.692 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.693 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.693 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: 数据库(String)
2020-08-08 21:05:33.694 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.695 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.695 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.696 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:05:33.696 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:05:33.696 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.696 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.697 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:05:33.697 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:05:33.698 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:05:33.698 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:05:33.698 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:05:33.698 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:05:33.698 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:05:33.699 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:05:33.699 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:05:33.699 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.699 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringMVC(String)
2020-08-08 21:05:33.700 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.700 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.701 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 3(Integer)
2020-08-08 21:05:33.701 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:05:33.701 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:05:33.701 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: MyBatis(String)
2020-08-08 21:05:33.702 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:05:33.704 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:05:33.704 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 4(Integer)
2020-08-08 21:05:33.704 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:05:33.705 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==>  Preparing: select distinct tag.*, count(blog_tag.blog_id) as blogNum from tag left join blog_tag on tag.tag_id = blog_tag.tag_id group by tag.tag_id order by blogNum desc limit ?
2020-08-08 21:05:33.705 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==> Parameters: 10(Integer)
2020-08-08 21:05:33.706 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : <==      Total: 7
2020-08-08 21:05:33.706 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:05:33.706 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 学习笔记(String)
2020-08-08 21:05:33.707 DEBUG 8884 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:05:33.708 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:05:33.708 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:05:33.709 DEBUG 8884 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:05:33.723 ERROR 8884 --- [http-nio-8080-exec-1] c.f.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @338fe6d5)
2020-08-08 21:05:33.725  WARN 8884 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @338fe6d5)]
2020-08-08 21:06:40.988  INFO 12800 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 12800 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:06:40.988 DEBUG 12800 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:06:40.988  INFO 12800 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:06:41.018  INFO 12800 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:06:41.018  INFO 12800 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:06:41.478  INFO 12800 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:06:41.478  INFO 12800 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:06:41.508  INFO 12800 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 15ms. Found 0 Redis repository interfaces.
2020-08-08 21:06:41.578  WARN 12800 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:06:41.878  INFO 12800 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:06:41.888  INFO 12800 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:06:41.888  INFO 12800 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:06:41.938  INFO 12800 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:06:41.938  INFO 12800 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 920 ms
2020-08-08 21:06:42.543  INFO 12800 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:06:42.593  INFO 12800 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:06:42.633  INFO 12800 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:06:42.643  INFO 12800 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:06:42.643  INFO 12800 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:06:42.643  INFO 12800 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:06:42.773  INFO 12800 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:06:42.803  INFO 12800 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:06:42.813  INFO 12800 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.119 seconds (JVM running for 2.818)
2020-08-08 21:06:42.823  INFO 12800 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:06:43.013  INFO 12800 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:06:43.023 DEBUG 12800 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:06:43.033 DEBUG 12800 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:06:43.053 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:06:43.053 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:06:43.063 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:06:43.073 DEBUG 12800 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:06:43.073 DEBUG 12800 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:06:43.503  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:06:43.503  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:06:43.503  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:06:43.503  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:06:43.503  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:06:43.513  INFO 12800 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:07:01.884  INFO 12976 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 12976 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:07:01.884 DEBUG 12976 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:07:01.884  INFO 12976 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:07:01.914  INFO 12976 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:07:01.914  INFO 12976 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:07:02.434  INFO 12976 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:07:02.434  INFO 12976 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:07:02.464  INFO 12976 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-08-08 21:07:02.544  WARN 12976 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:07:02.894  INFO 12976 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:07:02.904  INFO 12976 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:07:02.904  INFO 12976 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:07:02.954  INFO 12976 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:07:02.954  INFO 12976 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1040 ms
2020-08-08 21:07:03.604  INFO 12976 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:07:03.644  INFO 12976 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:07:03.694  INFO 12976 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:07:03.694  INFO 12976 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:07:03.694  INFO 12976 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:07:03.694  INFO 12976 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:07:03.844  INFO 12976 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:07:03.864  INFO 12976 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:07:03.874  INFO 12976 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.298 seconds (JVM running for 3.245)
2020-08-08 21:07:14.030  INFO 12976 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:07:15.513  INFO 12976 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:07:15.573 DEBUG 12976 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:07:15.773 DEBUG 12976 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:07:16.063 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:07:16.073 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:07:16.073 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:07:16.083 DEBUG 12976 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:07:16.083 DEBUG 12976 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:07:16.093 DEBUG 12976 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:07:16.123 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:07:16.123 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:07:16.123 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:07:16.123 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:07:16.123 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:07:16.133 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:07:16.133 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:07:16.133 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:07:16.143 DEBUG 12976 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:07:16.143 DEBUG 12976 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:10:52.178  WARN 12976 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m6s550ms199µs900ns).
2020-08-08 21:10:52.178  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:10:52.208  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:10:52.208  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:10:52.208  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:10:52.218  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:10:52.228  INFO 12976 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:10:52.388  INFO 12976 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-08 21:10:52.388  INFO 12976 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-08-08 21:10:52.398  INFO 12976 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-08-08 21:11:13.488  INFO 8052 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 8052 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:11:13.488 DEBUG 8052 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:11:13.488  INFO 8052 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:11:13.508  INFO 8052 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:11:13.508  INFO 8052 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:11:13.985  INFO 8052 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:11:13.985  INFO 8052 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:11:14.015  INFO 8052 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-08-08 21:11:14.085  WARN 8052 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:11:14.395  INFO 8052 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:11:14.405  INFO 8052 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:11:14.405  INFO 8052 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:11:14.455  INFO 8052 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:11:14.455  INFO 8052 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 947 ms
2020-08-08 21:11:15.045  INFO 8052 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:11:15.095  INFO 8052 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:11:15.145  INFO 8052 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:11:15.145  INFO 8052 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:11:15.145  INFO 8052 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:11:15.145  INFO 8052 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:11:15.285  INFO 8052 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:11:15.325  INFO 8052 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:11:15.335  INFO 8052 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.141 seconds (JVM running for 2.781)
2020-08-08 21:11:15.345  INFO 8052 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:11:15.545  INFO 8052 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:11:15.545 DEBUG 8052 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:11:15.555 DEBUG 8052 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:11:15.585 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:11:15.595 DEBUG 8052 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:11:16.015  INFO 8052 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:11:22.008  INFO 8052 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-08 21:11:22.009  INFO 8052 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-08-08 21:11:22.014  INFO 8052 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-08-08 21:11:22.060 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==>  Preparing: SELECT count(0) FROM blog
2020-08-08 21:11:22.060 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==> Parameters: 
2020-08-08 21:11:22.061 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : <==      Total: 1
2020-08-08 21:11:22.063 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog LIMIT ?
2020-08-08 21:11:22.063 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.071 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : <==      Total: 5
2020-08-08 21:11:22.074 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.074 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.075 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.096 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.096 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.097 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:11:22.100 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.100 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.101 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.102 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.102 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.102 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.103 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.103 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.104 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.104 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.104 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.105 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.106 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.106 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.107 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:11:22.107 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.107 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.108 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.109 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.109 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.110 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.110 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.111 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.111 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.112 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.112 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.112 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.113 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.113 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:11:22.114 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.115 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.116 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.116 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.117 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.117 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.118 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.119 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.119 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.120 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.121 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.121 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:11:22.121 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.122 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.122 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:11:22.123 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.123 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.123 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.124 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.124 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.124 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.125 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.125 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.126 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.126 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.127 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.127 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:11:22.127 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.128 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.128 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.128 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.130 DEBUG 8052 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==>  Preparing: select distinct type.*, count(blog.blog_id) as blogNum from type left join blog on type.type_id = blog.type_id group by type.type_id order by blogNum desc limit ?
2020-08-08 21:11:22.130 DEBUG 8052 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==> Parameters: 10(Integer)
2020-08-08 21:11:22.131 DEBUG 8052 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : <==      Total: 6
2020-08-08 21:11:22.132 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.132 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: JavaSE(String)
2020-08-08 21:11:22.134 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.135 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.135 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.140 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 2
2020-08-08 21:11:22.140 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.140 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.141 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.142 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.142 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:11:22.142 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.143 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.144 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.145 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.145 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.146 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.146 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.146 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:11:22.147 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.147 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.148 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.148 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.149 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.149 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringBoot(String)
2020-08-08 21:11:22.150 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.150 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.151 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.151 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:11:22.152 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.152 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.152 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.153 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.153 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.154 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:11:22.154 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.154 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.155 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.155 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.155 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.155 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.156 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.156 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.156 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.156 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.157 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: Spring(String)
2020-08-08 21:11:22.157 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.158 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.158 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.159 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:11:22.159 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.159 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.159 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.160 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.160 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.161 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:11:22.161 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.161 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:11:22.161 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.162 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.162 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.162 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.162 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.162 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.163 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.163 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.164 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: 数据库(String)
2020-08-08 21:11:22.164 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.165 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.165 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.166 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:11:22.166 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:11:22.167 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.167 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.168 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:11:22.168 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:11:22.168 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:11:22.169 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:11:22.169 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:11:22.169 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:11:22.169 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:11:22.169 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:11:22.170 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:11:22.170 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.170 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringMVC(String)
2020-08-08 21:11:22.171 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.171 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.171 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 3(Integer)
2020-08-08 21:11:22.172 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:11:22.172 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:11:22.172 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: MyBatis(String)
2020-08-08 21:11:22.173 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:11:22.174 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:11:22.174 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 4(Integer)
2020-08-08 21:11:22.175 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:11:22.175 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==>  Preparing: select distinct tag.*, count(blog_tag.blog_id) as blogNum from tag left join blog_tag on tag.tag_id = blog_tag.tag_id group by tag.tag_id order by blogNum desc limit ?
2020-08-08 21:11:22.175 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==> Parameters: 10(Integer)
2020-08-08 21:11:22.176 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : <==      Total: 7
2020-08-08 21:11:22.177 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:11:22.177 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 学习笔记(String)
2020-08-08 21:11:22.177 DEBUG 8052 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:11:22.178 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:11:22.178 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:11:22.179 DEBUG 8052 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:11:22.193 ERROR 8052 --- [http-nio-8080-exec-1] c.f.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @7e0b0c54)
2020-08-08 21:11:22.195  WARN 8052 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @7e0b0c54)]
2020-08-08 21:14:02.736  INFO 32 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 32 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:14:02.737 DEBUG 32 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:14:02.737  INFO 32 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:14:02.770  INFO 32 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:14:02.770  INFO 32 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:14:03.303  INFO 32 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:14:03.304  INFO 32 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:14:03.330  INFO 32 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-08-08 21:14:03.406  WARN 32 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:14:03.705  INFO 32 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:14:03.711  INFO 32 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:14:03.711  INFO 32 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:14:03.768  INFO 32 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:14:03.769  INFO 32 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 999 ms
2020-08-08 21:14:04.374  INFO 32 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:14:04.420  INFO 32 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:14:04.464  INFO 32 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:14:04.465  INFO 32 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:14:04.465  INFO 32 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:14:04.465  INFO 32 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:14:04.617  INFO 32 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:14:04.644  INFO 32 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:14:04.653  INFO 32 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.213 seconds (JVM running for 2.864)
2020-08-08 21:14:04.664  INFO 32 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:14:04.861  INFO 32 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:14:04.866 DEBUG 32 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:14:04.880 DEBUG 32 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:14:04.901 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:14:04.901 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:14:04.902 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:14:04.905 DEBUG 32 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:14:04.905 DEBUG 32 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:14:04.906 DEBUG 32 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:14:04.908 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:14:04.909 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:14:04.909 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:14:04.910 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:14:04.910 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:14:04.911 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:14:04.912 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:14:04.912 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:14:04.913 DEBUG 32 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:14:04.914 DEBUG 32 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:14:05.337  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:14:05.339  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:14:05.340  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:14:05.341  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:14:05.342  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:14:05.345  INFO 32 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:14:10.780  INFO 32 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-08 21:14:10.782  INFO 32 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-08-08 21:14:10.787  INFO 32 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-08-08 21:14:10.832 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==>  Preparing: SELECT count(0) FROM blog
2020-08-08 21:14:10.832 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==> Parameters: 
2020-08-08 21:14:10.834 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : <==      Total: 1
2020-08-08 21:14:10.835 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog LIMIT ?
2020-08-08 21:14:10.835 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.843 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : <==      Total: 5
2020-08-08 21:14:10.846 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.846 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.847 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.867 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.867 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.868 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:14:10.871 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.871 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.872 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.872 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.872 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.873 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.873 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.873 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.874 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.874 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.874 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.875 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.876 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.876 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.877 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:14:10.877 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.877 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.878 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.879 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.879 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.880 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.880 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.880 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.881 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.881 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.882 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.882 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.883 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.883 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:14:10.884 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.884 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.885 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.885 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.886 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.886 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.886 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.887 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.887 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.887 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.888 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.888 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:14:10.889 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.889 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.889 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:14:10.889 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.890 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.890 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.890 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.891 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.891 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.891 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.892 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.892 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.892 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.893 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.893 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:14:10.893 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.894 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.894 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.894 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.896 DEBUG 32 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==>  Preparing: select distinct type.*, count(blog.blog_id) as blogNum from type left join blog on type.type_id = blog.type_id group by type.type_id order by blogNum desc limit ?
2020-08-08 21:14:10.896 DEBUG 32 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==> Parameters: 10(Integer)
2020-08-08 21:14:10.897 DEBUG 32 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : <==      Total: 6
2020-08-08 21:14:10.898 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.898 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: JavaSE(String)
2020-08-08 21:14:10.899 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.900 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.900 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.904 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 2
2020-08-08 21:14:10.905 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.905 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.905 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.906 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.906 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:14:10.907 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.907 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.907 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:14:10.907 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.908 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.908 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.908 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.909 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.909 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.909 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.910 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.910 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.911 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.911 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.911 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:14:10.912 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.912 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.912 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.913 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.913 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.913 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringBoot(String)
2020-08-08 21:14:10.914 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.914 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.915 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.916 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:14:10.916 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.916 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.916 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.917 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.917 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.917 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:14:10.918 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.918 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.918 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.918 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.918 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.919 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.919 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.919 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.920 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.920 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.920 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: Spring(String)
2020-08-08 21:14:10.921 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.921 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.921 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.922 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:14:10.922 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.922 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.923 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.923 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.924 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.924 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:14:10.924 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.924 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:14:10.925 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.925 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.925 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.925 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.926 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.926 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.926 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.927 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.927 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: 数据库(String)
2020-08-08 21:14:10.927 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.928 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.928 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.929 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:14:10.929 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:14:10.929 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.930 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.930 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:14:10.930 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:14:10.931 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:14:10.931 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:14:10.931 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:14:10.931 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:14:10.932 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:14:10.932 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:14:10.932 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:14:10.933 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.933 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringMVC(String)
2020-08-08 21:14:10.933 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.934 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.934 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 3(Integer)
2020-08-08 21:14:10.934 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:14:10.935 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:14:10.935 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: MyBatis(String)
2020-08-08 21:14:10.935 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:14:10.937 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:14:10.937 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 4(Integer)
2020-08-08 21:14:10.937 DEBUG 32 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:14:10.937 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==>  Preparing: select distinct tag.*, count(blog_tag.blog_id) as blogNum from tag left join blog_tag on tag.tag_id = blog_tag.tag_id group by tag.tag_id order by blogNum desc limit ?
2020-08-08 21:14:10.937 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==> Parameters: 10(Integer)
2020-08-08 21:14:10.938 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : <==      Total: 7
2020-08-08 21:14:10.939 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:14:10.939 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 学习笔记(String)
2020-08-08 21:14:10.939 DEBUG 32 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:14:10.940 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:14:10.940 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:14:10.941 DEBUG 32 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:14:10.955 ERROR 32 --- [http-nio-8080-exec-1] c.f.handler.ControllerExceptionHandler   : Request URL: http://localhost:8080/, Exception: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @4038f81a)
2020-08-08 21:14:10.957  WARN 32 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class com.flexia.entity.Blog (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; com.flexia.entity.Blog is in unnamed module of loader org.springframework.boot.devtools.restart.classloader.RestartClassLoader @4038f81a)]
2020-08-08 21:18:33.604  INFO 11572 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Starting SpringBootBlogApplication on SmallFun with PID 11572 (G:\Project\spring-boot-blog\target\classes started by Administrator in G:\Project\spring-boot-blog)
2020-08-08 21:18:33.614 DEBUG 11572 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Running with Spring Boot v2.3.1.RELEASE, Spring v5.2.7.RELEASE
2020-08-08 21:18:33.614  INFO 11572 --- [restartedMain] com.flexia.SpringBootBlogApplication     : The following profiles are active: dev
2020-08-08 21:18:33.634  INFO 11572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-08 21:18:33.634  INFO 11572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-08-08 21:18:34.126  INFO 11572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-08-08 21:18:34.126  INFO 11572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-08-08 21:18:34.156  INFO 11572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-08-08 21:18:34.226  WARN 11572 --- [restartedMain] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '[com.flexia]' package. Please check your configuration.
2020-08-08 21:18:34.526  INFO 11572 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-08-08 21:18:34.536  INFO 11572 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-08-08 21:18:34.536  INFO 11572 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2020-08-08 21:18:34.583  INFO 11572 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-08-08 21:18:34.593  INFO 11572 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 959 ms
2020-08-08 21:18:35.163  INFO 11572 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-08-08 21:18:35.203  INFO 11572 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-08-08 21:18:35.243  INFO 11572 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.util.MsUtil CLASS_CACHE cache.
2020-08-08 21:18:35.243  INFO 11572 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.genid.GenIdUtil CACHE cache.
2020-08-08 21:18:35.243  INFO 11572 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear tk.mybatis.mapper.version.VersionUtil CACHE cache.
2020-08-08 21:18:35.243  INFO 11572 --- [restartedMain] t.m.m.autoconfigure.MapperCacheDisabler  : Clear EntityHelper entityTableMap cache.
2020-08-08 21:18:35.403  INFO 11572 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-08-08 21:18:35.423  INFO 11572 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-08-08 21:18:35.433  INFO 11572 --- [restartedMain] com.flexia.SpringBootBlogApplication     : Started SpringBootBlogApplication in 2.116 seconds (JVM running for 2.764)
2020-08-08 21:18:35.453  INFO 11572 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-08-08 21:18:35.643  INFO 11572 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-08-08 21:18:35.653 DEBUG 11572 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==>  Preparing: select * from blog order by update_time desc
2020-08-08 21:18:35.663 DEBUG 11572 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : ==> Parameters: 
2020-08-08 21:18:35.683 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 6(Integer)
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====>  Preparing: select * from user where user_id = ?
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : ====> Parameters: 1(String)
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.m.UserMapper.selectUserByUserId      : <====      Total: 1
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 5(Integer)
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 1(Integer)
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====>  Preparing: select * from type where type_id = ?
2020-08-08 21:18:35.693 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : ====> Parameters: 2(Integer)
2020-08-08 21:18:35.703 DEBUG 11572 --- [restartedMain] c.f.mapper.TypeMapper.selectTypeById     : <====      Total: 1
2020-08-08 21:18:35.703 DEBUG 11572 --- [restartedMain] c.flexia.mapper.BlogMapper.findAllBlog   : <==      Total: 5
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java面向对象
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Java基础
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：数据库基础
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：SpringBoot简介
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 将blog数据添加到redis的AllBlog中，其博客标题为：Spring概述
2020-08-08 21:18:36.123  INFO 11572 --- [restartedMain] com.flexia.config.SetupRunner            : 初始化redis中blogCount的数量为：5
2020-08-08 21:18:41.541  INFO 11572 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-08-08 21:18:41.543  INFO 11572 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-08-08 21:18:41.548  INFO 11572 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5 ms
2020-08-08 21:18:41.594 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==>  Preparing: SELECT count(0) FROM blog
2020-08-08 21:18:41.594 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : ==> Parameters: 
2020-08-08 21:18:41.596 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectAll_COUNT    : <==      Total: 1
2020-08-08 21:18:41.597 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog LIMIT ?
2020-08-08 21:18:41.597 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.605 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.BlogMapper.selectAll   : <==      Total: 5
2020-08-08 21:18:41.608 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.608 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.609 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.629 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.630 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.631 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.633 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.633 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.634 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.634 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.634 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.635 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.635 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.636 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.636 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.637 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.637 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.637 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.638 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.638 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.639 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.639 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.640 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.641 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.642 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.642 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.642 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.643 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.643 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.643 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.644 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.644 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.645 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.646 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.646 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.647 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.647 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.647 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.648 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.648 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.648 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.649 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.650 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.650 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.650 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.651 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.651 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.652 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.652 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.652 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.652 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.653 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.653 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.653 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.654 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.654 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.654 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.655 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.655 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.655 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.656 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.656 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.656 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.657 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.657 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.657 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.659 DEBUG 11572 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==>  Preparing: select distinct type.*, count(blog.blog_id) as blogNum from type left join blog on type.type_id = blog.type_id group by type.type_id order by blogNum desc limit ?
2020-08-08 21:18:41.659 DEBUG 11572 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : ==> Parameters: 10(Integer)
2020-08-08 21:18:41.660 DEBUG 11572 --- [http-nio-8080-exec-1] c.flexia.mapper.TypeMapper.getTopTypes   : <==      Total: 6
2020-08-08 21:18:41.661 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.661 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: JavaSE(String)
2020-08-08 21:18:41.662 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.663 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.663 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.668 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 2
2020-08-08 21:18:41.668 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.668 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.669 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.670 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.670 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.670 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.671 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.671 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.671 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.672 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.672 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.672 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.673 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.673 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.673 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.674 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.674 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.675 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.675 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.675 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.676 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.676 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.676 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.677 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.677 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.677 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringBoot(String)
2020-08-08 21:18:41.678 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.679 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.679 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.680 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:18:41.680 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.680 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.680 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.681 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.681 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.681 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.682 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.682 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.682 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.682 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.683 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.683 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.683 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.683 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.684 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.684 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.684 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: Spring(String)
2020-08-08 21:18:41.685 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.685 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.685 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.686 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:18:41.686 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.686 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.687 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.687 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.687 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.688 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.688 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.688 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.689 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.689 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.689 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.689 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.689 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.690 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.690 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.690 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.691 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: 数据库(String)
2020-08-08 21:18:41.691 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.692 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.692 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.693 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 1
2020-08-08 21:18:41.693 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.693 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.694 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.694 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.695 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.695 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.695 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.695 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.696 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.696 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.696 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.697 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.697 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.697 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: SpringMVC(String)
2020-08-08 21:18:41.697 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.698 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.698 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.698 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:18:41.699 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==>  Preparing: SELECT type_id,name FROM type WHERE name = ?
2020-08-08 21:18:41.699 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : ==> Parameters: MyBatis(String)
2020-08-08 21:18:41.699 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TypeMapper.selectOne   : <==      Total: 1
2020-08-08 21:18:41.701 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE ( ( type_id = ? ) )
2020-08-08 21:18:41.701 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.702 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 0
2020-08-08 21:18:41.702 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==>  Preparing: select distinct tag.*, count(blog_tag.blog_id) as blogNum from tag left join blog_tag on tag.tag_id = blog_tag.tag_id group by tag.tag_id order by blogNum desc limit ?
2020-08-08 21:18:41.702 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : ==> Parameters: 10(Integer)
2020-08-08 21:18:41.703 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.getTopTags   : <==      Total: 7
2020-08-08 21:18:41.704 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.704 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 学习笔记(String)
2020-08-08 21:18:41.704 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.705 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.705 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.706 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.733  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为Spring概述
2020-08-08 21:18:41.735  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为SpringBoot简介
2020-08-08 21:18:41.735 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.735 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.736 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.736 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.736 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.737 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.737 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.737 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.738 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.738 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.738 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.739 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.739 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.739 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.739 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.740 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.740 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.740 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.741 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.741 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.741 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.741 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.742 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.742 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.742 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.742 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.743 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.743 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.743 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.744 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.744 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.744 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: JavaSE(String)
2020-08-08 21:18:41.745 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.745 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.745 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.746 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.748  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为Java基础
2020-08-08 21:18:41.751  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为Java面向对象
2020-08-08 21:18:41.752 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.752 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.752 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.753 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.753 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.753 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.753 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.754 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.754 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.754 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.754 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.755 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.755 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.755 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.756 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.756 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.756 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.757 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.757 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.757 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.758 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.758 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.758 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.758 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.758 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.759 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: SpringBoot(String)
2020-08-08 21:18:41.759 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.759 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.760 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.760 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.763  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为SpringBoot简介
2020-08-08 21:18:41.763 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.763 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.764 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.764 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.764 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.765 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.765 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.765 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.766 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.766 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.766 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.766 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.766 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.767 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.767 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.767 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.767 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: Spring(String)
2020-08-08 21:18:41.768 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.768 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.769 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.769 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.771  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为Spring概述
2020-08-08 21:18:41.772 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.772 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.772 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.773 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.773 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.774 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.774 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.774 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.775 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.775 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.775 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.775 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.776 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.776 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.776 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.776 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.776 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: 数据库(String)
2020-08-08 21:18:41.777 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.778 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.778 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.778 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.780  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取blog的数据，标题为数据库基础
2020-08-08 21:18:41.780 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.780 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.781 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.781 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.782 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.782 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.782 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.783 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.783 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.783 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.783 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: null
2020-08-08 21:18:41.784 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 0
2020-08-08 21:18:41.784 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.784 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: SpringMVC(String)
2020-08-08 21:18:41.785 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.785 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.785 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.786 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 0
2020-08-08 21:18:41.786 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==>  Preparing: SELECT tag_id,name FROM tag WHERE name = ?
2020-08-08 21:18:41.786 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : ==> Parameters: MyBatis(String)
2020-08-08 21:18:41.787 DEBUG 11572 --- [http-nio-8080-exec-1] com.flexia.mapper.TagMapper.selectOne    : <==      Total: 1
2020-08-08 21:18:41.787 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( tag_id = ? ) )
2020-08-08 21:18:41.787 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.788 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 0
2020-08-08 21:18:41.790  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 从redis中获取最新博客
2020-08-08 21:18:41.790 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog order by update_time desc limit 10
2020-08-08 21:18:41.790 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : ==> Parameters: 
2020-08-08 21:18:41.795 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.BlogMapper.selectByExample    : <==      Total: 5
2020-08-08 21:18:41.796 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.796 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.797 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.797 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.797 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.798 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.798 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.798 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.799 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.799 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.799 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.800 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.800 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.800 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.800 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.801 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.801 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:18:41.801 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.802 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.802 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:18:41.802 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.802 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.802 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.803 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.803 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.803 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.804 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.804 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.804 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:18:41.805 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:18:41.805 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.806 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:18:41.806 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.806 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.806 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.807 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.807 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.807 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.808 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.808 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.808 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.809 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.809 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.809 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.810 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.810 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.810 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.811 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.811 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.811 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.812 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.812 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:18:41.812 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.812 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.813 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:18:41.813 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.813 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:18:41.814 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.814 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:18:41.814 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.814 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:18:41.815 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:18:41.815 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:18:41.815 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:18:41.815 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:18:41.816 DEBUG 11572 --- [http-nio-8080-exec-1] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:18:41.819  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 将blog数据添加到TheLatestBlog中，标题为Java面向对象
2020-08-08 21:18:41.821  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 将blog数据添加到TheLatestBlog中，标题为Java基础
2020-08-08 21:18:41.822  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 将blog数据添加到TheLatestBlog中，标题为数据库基础
2020-08-08 21:18:41.823  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 将blog数据添加到TheLatestBlog中，标题为SpringBoot简介
2020-08-08 21:18:41.824  INFO 11572 --- [http-nio-8080-exec-1] com.flexia.service.BlogService           : 将blog数据添加到TheLatestBlog中，标题为Spring概述
2020-08-08 21:18:42.372  INFO 11572 --- [http-nio-8080-exec-4] com.flexia.service.BlogService           : 从redis中获取最新博客
2020-08-08 21:19:01.017 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogMapper.selectByPrimaryKey      : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE blog_id = ?
2020-08-08 21:19:01.017 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:19:01.018 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:01.057 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:01.057 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:19:01.058 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:01.060 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:01.060 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:19:01.060 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:19:01.061 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:01.061 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:19:01.061 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:01.061 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:01.061 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:19:01.062 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:01.062 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:01.062 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:01.062 DEBUG 11572 --- [http-nio-8080-exec-2] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:01.324  INFO 11572 --- [http-nio-8080-exec-10] com.flexia.service.BlogService           : 从redis中获取最新博客
2020-08-08 21:19:01.464 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time
2020-08-08 21:19:01.464 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), -1(Integer)
2020-08-08 21:19:01.468 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 2
2020-08-08 21:19:01.469 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time asc
2020-08-08 21:19:01.469 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), 1(Integer)
2020-08-08 21:19:01.470 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:01.470 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time asc
2020-08-08 21:19:01.470 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), 2(Integer)
2020-08-08 21:19:01.471 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:01.471 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time asc
2020-08-08 21:19:01.472 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), 4(Integer)
2020-08-08 21:19:01.472 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:01.473 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time asc
2020-08-08 21:19:01.473 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), 5(Integer)
2020-08-08 21:19:01.473 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 0
2020-08-08 21:19:01.474 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==>  Preparing: SELECT comment_id,nickname,email,content,avatar,create_time,blog_id,parent_comment_id FROM comment WHERE ( ( blog_id = ? and parent_comment_id = ? ) ) order by create_time asc
2020-08-08 21:19:01.474 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : ==> Parameters: 2(Integer), 3(Integer)
2020-08-08 21:19:01.474 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.CommentMapper.selectByExample      : <==      Total: 0
2020-08-08 21:19:05.312 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogMapper.findYearsGroupByYear    : ==>  Preparing: select date_format(blog.update_time, '%Y') as year from blog group by year order by year desc
2020-08-08 21:19:05.312 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogMapper.findYearsGroupByYear    : ==> Parameters: 
2020-08-08 21:19:05.313 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogMapper.findYearsGroupByYear    : <==      Total: 1
2020-08-08 21:19:05.313 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.BlogMapper.getBlogByYear      : ==>  Preparing: select * from blog where date_format(blog.update_time, '%Y') = ?
2020-08-08 21:19:05.313 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.BlogMapper.getBlogByYear      : ==> Parameters: 2020(Integer)
2020-08-08 21:19:05.318 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.BlogMapper.getBlogByYear      : <==      Total: 5
2020-08-08 21:19:05.319 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE title = ? AND content = ? AND flag = ? AND description = ? AND views = ? AND appreciation = ? AND publish = ? AND recommend = ?
2020-08-08 21:19:05.320 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==> Parameters: SpringBoot简介(String), # Spring Boot 简介

## 原有 Spring 优缺点分析

### Spring 的优点分析

- Spring 是 Java 企业版（Java Enterprise Edition，JEE，也称 J2EE）的轻量级代替品。
- 无需开发重量级的 Enterprise JavaBean（EJB），Spring 为企业级 Java 开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的 Java 对象（Plain Old Java Object，POJO）实现了 EJB 的功能。

### Spring 的缺点分析

- 虽然 Spring 的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring 用 XML 配置，而且是很多 XML 配置。Spring 2.5 引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式 XML 配置。Spring 3.0 引入了基于 Java 的配置，这是一种类型安全的可重构配置方式，可以代替 XML。
- **复杂的配置**：项目中的各种配置都代表了开发时的损耗。因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。
- **混乱的依赖管理**：项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。

## Spring Boot 的概述

### Spring Boot 解决上述 Spring 的缺点

- Spring Boot 对上述 Spring 的缺点进行的改善和优化，基于**约定优于配置**的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。

### Spring Boot 的特点

- 为基于 Spring 的开发提供更快的入门体验。
- 开箱即用，没有代码生成，也无需 XML 配置。同时也可以修改默认值来满足特定的需求。
- 提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等。
- Spring Boot 不是对 Spring 功能上的增强，而是提供了一种快速使用 Spring 的方式。

### Spring Boot 的核心功能

- **起步依赖：**
    - 起步依赖本质上是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。
    - 简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。
- **自动配置：**
    - Spring Boot 的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定 Spring 配置应该用哪个，不该用哪个。该过程是 Spring 自动完成的。(String), 原创(String), Spring Boot 对 Spring 的缺点进行改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。(String), 0(Integer), false(Boolean), true(Boolean), true(Boolean)
2020-08-08 21:19:05.321 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : <==      Total: 1
2020-08-08 21:19:05.321 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE title = ? AND content = ? AND flag = ? AND description = ? AND views = ? AND appreciation = ? AND comment = ? AND publish = ? AND recommend = ?
2020-08-08 21:19:05.322 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==> Parameters: Spring概述(String), # Spring 概述

## 什么是 Spring

- Spring 是分层的 Java SE/EE 应用 **full-stack** 轻量级开源框架，以 **IoC（InverseOfControl，反转控制）**和 **AOP（AspectOrientedProgramming，面向切面编程）**为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。

## Spring 的优势

- **方便解耦，简化开发**
    - 通过 Spring 提供的 IoC 容器，可以将对象间的依赖关系交由 Spring 进行控制，避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。
- **AOP 编程的支持**
    - 通过 Spring 的 AOP 功能，方便进行面向切面的编程，许多不容易用传统 OOP 实现的功能可以通过 AOP 轻松应付。
- **声明式事务的支持**
    - 可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。
- **方便程序的测试**
    - 可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。
- **方便集成各种优秀框架**
    - Spring 可以降低各种框架的使用难度，提供了对各种优秀框架（Struts、Hibernate、Hessian、Quartz 等）的直接支持。
- **降低 JavaEE API 的使用难度**
    - Spring 对 JavaEE API（如 JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些 API 的使用难度大为降低。
- **Java 源码是经典学习范例**
    - Spring 的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对 Java 设计模式灵活运用以及对 Java 技术的高深造诣。它的源代码无疑是 Java 技术的最佳实践的范例。(String), 原创(String), Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 IoC（反转控制）和 AOP（面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架。(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean)
2020-08-08 21:19:05.324 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : <==      Total: 1
2020-08-08 21:19:05.324 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE title = ? AND content = ? AND flag = ? AND description = ? AND views = ? AND appreciation = ? AND comment = ? AND publish = ? AND recommend = ?
2020-08-08 21:19:05.324 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==> Parameters: 数据库基础(String), # 数据库概述

1. 数据库的英文单词：
    - DataBase（简称 DB）。
2. 什么是数据库？
    - 用于存储和管理数据的仓库。
3. 数据库的特点：
    1. 持久化存储数据。其实数据库就是一个文件系统。
    2. 方便存储和管理数据。
    3. 使用了统一的方式操作数据库（SQL）。
4. 常见的数据库软件：
    1. Oarcle
    2. MySQL
    3. Microsoft SQL Server
5. 几个概念：
    1. 数据库：相当于文件夹
    2. 表：相当于文件
    3. 数据记录：文件中存储的数据

# 数据库基础

## SQL 概述

1. 什么是 SQL？

    - Structured Query Language，结构化查询语言。
    - 定义了操作所有关系型数据库的规则。
    - 不同的数据库软件操作数据库的方式存在不一样的地方，类似“方言”。

2. SQL 通用语法：

    1. SQL 语句可以单行或多行书写，以分号结尾。
    2. 可使用空格和缩进来增强语句的可读性。
    3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。
    4. 3 种注释：

      - 单行注释:：`-- 注释内容` 或 `# 注释内容`（MySQL 特有）
      - 多行注释：`/* 注释 */` 

3. SQL 分类：

    1. DDL（Data Definition Language）数据定义语言
        - 用来定义数据库对象：数据库，表，列等。
        - 关键字：`create`，`drop`，`alter` 等。
    2. DML（Data Manipulation Language）数据操作语言
        - 用来对数据库中表的数据进行增删改。
        - 关键字：`insert`，`delete`，`update` 等。
    3. DQL（Data Query Language）数据查询语言
        - 用来查询数据库中表的记录。
        - 关键字：`select`，`where` 等。
    4. DCL（Data Control Language）数据控制语言
        - 用来定义数据库的访问权限和安全级别及创建用户。
        - 关键字：`grant`，`revoke` 等。(String), 原创(String), 数据库，英文单词 DataBase（简称 DB），是用于存储和管理数据的仓库。(String), 0(Integer), false(Boolean), true(Boolean), true(Boolean), true(Boolean)
2020-08-08 21:19:05.325 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : <==      Total: 1
2020-08-08 21:19:05.326 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE title = ? AND content = ? AND flag = ? AND description = ? AND views = ? AND appreciation = ? AND comment = ? AND publish = ? AND recommend = ?
2020-08-08 21:19:05.327 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==> Parameters: Java基础(String), ---
title: Java基础
date: 2020-01-10 11:19:01
id: java-fundamentals
categories:
	- JavaSE
	- Java基础
tags:
	- JavaSE
	- Java基础
mathjax: 

---

# Java 概述

##  Java 语言

Java 语言是美国 Sun 公司（Stanford University Network），在 1995 年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。

## Java 虚拟机

**JVM（Java Virtual Machine）**：Java 虚拟机，简称 JVM，是运行所有 Java 程序的假想计算机，是 Java 程序的运行环境，是 Java 最具吸引力的特性之一。我们编写的 Java 代码，都运行在 JVM 之上。

**跨平台**：任何软件的运行，都必须要运行在操作系统之上，而我们用 Java 编写的软件可以运行在任何的操作系统上，这个特性称为 Java 语言的跨平台特性。该特性是由 JVM 实现的，我们编写的**程序运行在 JVM 上，而  JVM 运行在操作系统上**。

## JRE 和 JDK

**JRE (Java Runtime Environment)**：是 Java 程序的运行时环境，包含 JVM 和运行时所需要的核心类库。

**JDK (Java Development Kit)**：是 Java 程序开发工具包，包含 JRE 和开发人员使用的工具。

# Java 入门

## Java 程序开发

Java程序开发三步骤：**编写、编译、运行**

1. 编写 Java 源程序（后缀名 `.java`）
2. 编译 Java 源文件（使用 `javac` 命令编译源程序为**字节码文件**，文件后缀 `.class`）
3. 运行（使用 `java` 命令在 JVM 上运行字节码文件）

编译和运行的区别

- **编译**：是指将我们编写的 Java 源文件翻译成 JVM 认识的 class 文件，在这个过程中， javac 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。
- **运行**：是指将 class 文件交给 JVM 去运行，此时 JVM 就会去执行我们编写的程序了。

关于 **`main` 方法**

- main 方法，也称为主方法，是程序的入口或起点。
- JVM 在运行的时候，都会从 main 方法开始执行。

## 注释

**注释**：就是对代码的解释和说明，其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须要的，它不影响程序的编译和运行。

- 单行注释：`//开头，换行结束` 
- 多行注释：`/*开头，*/结束` 

## 关键字

**关键字**：是指在 Java 程序中事先定义好的单词，具有特殊意义。

- 完全小写的字母
- 在增强版的记事本中（如 notepad++）具有特殊颜色

## 标识符

**标识符**：是指在程序中，我们自己定义的内容，比如类的名字、方法的名字和变量的名字等等。

**命名规则：`硬性要求`** 

- 标识符可以包含 `英文字母26个（区分大小写）` 、 `0-9数字` 、 `$（美元符号）` 和 `_（下划线）` 
- 标识符不能以数字开头
- 标识符不能是关键字

**命名规范：`软性建议`** 

- 类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。
- 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。
- 变量名规范：同方法名。

## 常量

**常量**：Java 程序中固定不变的量

| 类型       | 含义                                     | 数据举例                 |
| ---------- | ---------------------------------------- | ------------------------ |
| 整型常量   | 所有的整数                               | 0，1，100，-250          |
| 小数常量   | 所有的小数                               | 0.0，2.5，-3.14          |
| 字符常量   | 单引号引起来，只能写一个字符，必须有内容 | 'A'，'b'，'9'，'好'，' ' |
| 字符串常量 | 双引号引起来，可以写多个字符，也可以不写 | "A"， "Hello"，"123"，"" |
| 布尔常量   | 只有两个值                               | true，false              |
| 空常量     | 只有一个值                               | null                     |

## 数据类型

Java 的数据类型分为两大类：

- **基本数据类型**：包括 `整数` 、 `浮点数` 、 `字符` 、 `布尔`  
- **引用数据类型**：包括 `字符串` 、 `数组` 、 `类` 、 `接口` 、 `Lambda` 

基本数据类型（4 类 8 种）

| 数据类型     | 关键字         | 内存占用 | 取值范围                |
| ------------ | -------------- | -------- | ----------------------- |
| 字节型       | byte           | 1 个字节 | -128 ~ 127              |
| 短整型       | short          | 2 个字节 | -32768 ~ 32767          |
| 整型         | int（默认）    | 4 个字节 | -2^31 ~ 2^31-1          |
| 长整型       | long           | 8 个字节 | -2^63 ~ 2^63-1          |
| 单精度浮点型 | float          | 4 个字节 | 1.4013E-45 ~ 3.4028E+38 |
| 双精度浮点型 | double（默认） | 8 个字节 | 4.9E-324 ~ 1.7977E+308  |
| 字符型       | char           | 2 个字节 | 0 ~ 65535               |
| 布尔型       | boolean        | -        | true，false             |

注意事项：

1. 字符串不是基本类型，而是引用类型。
2. 浮点型可能只是一个近似值，并非精确的值。
3. **数据范围与字节数不一定相关**，例如 float 数据范围比 long 更加广泛，但是 float 是4字节，long 是 8 字节。
4. 浮点数当中默认类型是 double。如果一定要使用 float 类型，需要加上一个**后缀 F**。如果是整数，默认为 int 类型，如果一定要使用 long 类型，需要加上一个**后缀 L**。推荐使用大写字母后缀。

## 变量

**变量**：程序运行期间，内容可以发生改变产生的量。

Java 中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。

创建和使用变量的格式：

```java
1. 数据类型 变量名称; // 创建了一个变量
   变量名称 = 数据值; // 赋值，将右边的数据值赋值给左边的变量

2. 数据类型 变量名称 = 数据值; // 在创建变量的同时，立刻放入指定的数据值

3. 变量1 = 变量2; // 将一个变量2的数据内容，赋值交给变量1
```

注意事项：

1. 如果创建多个变量，那么变量之间的名称不可以重复。
2. 对于 float 和 long 类型来说，字母后缀 F 和 L 不要丢掉。
3. 如果使用 byte 或者 short 类型的变量，那么右侧的数据值不能超过左侧类型的范围。
4. **没有进行赋值的变量，不能直接使用**；一定要赋值之后，才能使用。
5. 变量使用不能超过作用域的范围。
    **作用域**：从定义变量的一行开始，一直到直接所属的大括号结束为止。
6. 可以通过一个语句来创建多个变量，但是一般情况不推荐这么写。

# 数据类型转换

Java 程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果**数据类型不一致将发生类型转换**。

## 自动类型转换（隐式）

- 特点：代码不需要进行特殊处理，自动完成。
- 规则： `数据范围小的类型` 向 `数据范围大的类型` 提升。

```java
byte/short/char --> int --> long --> float --> double
```

## 强制类型转换（显式）

- 特点：代码需要进行特殊的格式处理，不能自动完成。
- 规则：将 `数据范围大的类型` 强制转换成 `数据范围小的类型` 。

```java
范围小的类型 范围小的变量名 = (范围小的类型) 原本的范围大的数据值
```

注意事项：

1. 强制类型转换一般不推荐使用，因为有可能发生**精度损失、数据溢出**。
2. byte / short / char 这三种类型都可以发生数学运算，例如加法 "+"。在运算的时候，都会被**首先提升成为 int 类型**，然后再计算。
3. boolean 类型不能发生数据类型转换。

## ASCII & Unicode 编码表

**编码表** ：数字和字符的对照关系表，就是将人类的文字和一个十进制数进行对应起来组成的一张表格。

- ASCII 码表：American Standard Code for Information Interchange，美国信息交换标准代码。
- Unicode 码表：万国码，开头 0-127 部分和 ASCII 完全一样，但是从 128 开始包含有更多字符。

# 运算符 & 表达式

运算符：进行特定操作的符号。

表达式：用运算符连起来的式子。

## 算术运算符

| 算术运算符 | 作用                       |
| ---------- | -------------------------- |
| `+`        | 加法运算，字符串连接运算   |
| `-`        | 减法运算                   |
| `*`        | 乘法运算                   |
| `/`        | 除法运算（整数相除只看商） |
| `%`        | 取模运算（整数相除取余数） |
| `++` `--`  | 自增和自减运算             |

注意事项：

1. 整数使用上述运算符的结果只会是整数。
2. 一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的那种。

运算符 `+` 的用法：

- 对数值来说，就是加法；
- 对字符 `char` 类型来说，计算之前先被提升为 `int` ；
- 对字符串 `String` 来说，加号代表**字符串连接**操作，任何数据类型与字符串进行连接的结果都是字符串。

运算符 `++` 的用法：

- 基本含义：变量自己增长 1 
- 使用格式：写在变量名称之前，或写在变量名称之后
- 使用方式：
    1. 单独使用：不和其他任何操作混合，自己独立成为一个步骤。此时 `前++` 和 `后++` 没有区别。
    2. 混合使用：与其他操作混合。如果是前++，那么变量马上加 1，然后拿着结果进行使用；如果是后++，那么首先使用变量本来的值，然后再加 1。
- 注意：只有变量才能使用自增和自减运算，常量不可发生改变。

## 赋值运算符

| 赋值运算符 | 作用         |
| ---------- | ------------ |
| `=`        | 基本赋值运算 |
| `+=`       | 加等于       |
| `-=`       | 减等于       |
| `*=`       | 乘等于       |
| `/=`       | 除等于       |
| `%=`       | 取模等       |

基本赋值运算：是将等号右边的值，赋值给等号左边的变量

复合赋值运算：将等号右边的值进行复合操作后，赋值给等号左边的变量

注意事项：

1. 只有变量才能使用赋值运算符，常量不能进行赋值。
2. **复合赋值运算符其中隐含了一个强制类型转换。**

## 比较运算符

| 比较运算符 | 作用     |
| ---------- | -------- |
| `==`       | 等于     |
| `<`        | 小于     |
| `>`        | 大于     |
| `<=`       | 小于等于 |
| `>=`       | 大于等于 |
| `!=`       | 不等于   |

比较运算：是两个数据之间进行比较的运算，运算结果都是布尔值 `true` 和 `false` 。

注意事项：如果进行多次判断，不能像数学中一样连着写。

## 逻辑运算符

| 逻辑运算符           | 作用                                               |
| -------------------- | -------------------------------------------------- |
| `&&` （与）          | 全都是 true 才是 true，否则就是 false              |
| &#124; &#124; （或） | 至少一个是 true 就是 true，全都是 false 才是 false |
| `!` （非）           | 本来是 true 变成 false，本来是 false 变成 true     |

注意事项：

1. 逻辑运算符只能用于 boolean 值。
2. 与、或需要左右各自有一个 boolean 值，但是取反只要有唯一的一个 boolean 值即可。
3. 与、或两种运算符，如果有多个条件，可以连续写 `条件A && 条件B && 条件C` 。
4. 与“&&”，或“||”，具有**短路**效果：如果根据左边已经可以判断得到最终结果，那么右边的代码将不再执行，从而节省一定的性能。

## 三元运算符

三元运算符格式：

```java
数据类型 变量名称 = 布尔类型表达式 ? 表达式A : 表达式B
```

流程：

- 如果布尔表达式成立（为 true），那么将表达式 A 的值赋值给左侧的变量；
- 如果布尔表达式不成立（为 false），那么将表达式 B 的值赋值给左侧的变量。

注意事项：

1. 必须同时保证表达式 A 和表达式 B 都符合左侧数据类型的要求。
2. **三元运算符的结果必须被使用**。

# 方法入门

## 方法概述

**方法**：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。当我们需要这个功能的时候，就可以去调用。这样即实现了**代码的复用性**，也**解决了代码冗余的现象**。

## 方法的定义

方法定义格式：

```java
修饰符 返回值类型 方法名(参数列表) {
    方法体;
}
```

- 方法名：方法名称的命名规则和变量一样，使用小驼峰。
- 方法体：也就是大括号当中可以包含任意条语句。

注意事项：

- 方法定义的先后顺序无所谓
- 方法的定义不能产生嵌套关系

## 方法的调用

方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法 main 中来调用我们自己定义好的方法。

在主方法中，直接写要调用的方法名字就可以调用了，格式如下：

```java
方法名(实参);
```

# 流程控制

在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能。

## 顺序结构

顺序结构：按照编写的顺序，依次运行。

```flow
st=>start: 开始
e=>end: 结束
op1=>operation: 步骤1
op2=>operation: 步骤2
opdots=>operation: ...
opn=>operation: 步骤n
st->op1->op2->opdots->opn->e
```

## 分支（选择）结构

### 判断语句（`if`）

#### `if` 语句

```java
if (关系表达式) {
    语句体;
}
```

```flow
op1=>operation: 其他语句
cond=>condition: 关系表达式
op2=>operation: 语句体
op3=>operation: 其他语句
op1->cond
cond(yes)->op2->op3
cond(no)->op3
```

#### `if-else` 语句

```java
if (关系表达式) {
    语句体1;
} else {
    语句体2;
}
```

```flow
op1=>operation: 其他语句
op2=>operation: 其他语句
cond=>condition: 关系表达式
op3=>operation: 语句体1
op4=>operation: 语句体2
op1->cond
cond(yes)->op3->op2
cond(no)->op4->op2
```

#### `if-else if-else` 语句

```java
if (判断条件1) {
    语句体1;
} else if (判断条件2) {
    语句体2;
}
...
} else if (判断条件n) {
    语句体n;
} else {
    语句体n+1;
}
```

```flow
st=>operation: 其他语句
e=>operation: 其他语句
cond1=>condition: 判断条件1
cond2=>condition: 判断条件2
conddots=>condition: ……
condn=>condition: 判断条件n
op1=>operation: 语句体1
op2=>operation: 语句体2
opdots=>operation: ……
opn=>operation: 语句体n
opn+1=>operation: 语句体n+1
st->cond1
cond1(yes)->op1->e
cond1(no)->cond2
cond2(yes)->op2->e
cond2(no)->conddots
conddots(yes)->opdots->e
conddots(no)->condn
condn(yes)->opn->e
condn(no)->opn+1->e
```

### 选择语句（`switch`）

 `switch` 语句格式：

```java
switch(表达式) {
    case 常量值1:
        语句体1;
        break;
    case 常量值2:
        语句体2;
        break;
    ...
    default:
        语句体n+1;
        break;
}
```

```flow
st=>operation: 其他语句
e=>operation: 其他语句
cond1=>condition: 表达式=常量值1
cond2=>condition: 表达式=常量值2
conddots=>condition: ......
op1=>operation: 语句体1
op2=>operation: 语句体2
opdots=>operation: ......
opn+1=>operation: 语句体n+1
st->cond1
cond1(yes)->op1->e
cond1(no)->cond2
cond2(yes)->op2->e
cond2(no)->conddots
conddots(yes)->opdots->e
conddots(no)->opn+1->e
```

注意事项：

1. 多个 case 后面的数值不可以重复。
2. switch 后面小括号当中只能是下列数据类型：
    - 基本数据类型：`byte` 、 `short` 、 `char` 、 `int`
    - 引用数据类型：`String` 、 `enum` 
3. switch 语句格式可以很灵活：前后顺序可以颠倒，而且 break 语句还可以省略。**匹配哪一个 case 就从哪一个位置向下执行，直到遇到了 break 或者整体结束为止。**

## 循环结构

循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为 false，从而结束循环，否则循环将一直执行下去，形成死循环。

循环结构的基本组成部分，一般可以分成四部分：

1. **初始化语句**：在循环开始最初执行，而且只做唯一一次。
2. **条件判断**：如果成立，则循环继续；如果不成立，则循环退出。
3. **循环体**：重复要做的事情内容，若干行语句。
4. **步进语句**：每次循环之后都要进行的扫尾工作，每次循环结束之后都要执行一次。

###  `for` 循环

 `for` 循环语句格式：

```java
for(初始化表达式; 布尔表达式; 步进表达式) {
    循环体;
}
```

```flow
st=>operation: 其他语句
e=>operation: 其他语句
op1=>operation: 初始化语句
cond=>condition: 条件判断语句
op2=>operation: 循环体语句
op3=>operation: 步进语句
st->op1->cond
cond(yes)->op2->op3(left)->cond
cond(no)->e
```

###  `while` 循环

 `while` 循环语句格式：

```java
初始化语句;
while(布尔表达式) {
    循环体;
    步进语句;
}
```

```flow
st=>operation: 其他语句
e=>operation: 其他语句
op1=>operation: 初始化语句
cond=>condition: 条件判断语句
op2=>operation: 循环体语句
op3=>operation: 步进语句
st->op1->cond
cond(yes)->op2->op3(left)->cond
cond(no)->e
```

###  `do-while` 循环

 `do while` 循环语句格式：

```java
初始化语句;
do {
    循环体;
    步进语句;
}while(布尔表达式);
```

```flow
st=>operation: 其他语句
e=>operation: 其他语句
op1=>operation: 初始化语句
cond=>condition: 条件判断语句
op2=>operation: 循环体语句
op3=>operation: 步进语句
st->op1->op2->op3->cond
cond(yes)->op2
cond(no)->e
```

 `do-while` 循环的特点：**无条件执行一次循环体**，即使我们将循环条件直接写成 false，也依然会循环一次。这样的循环具有一定的风险性。

### 三种循环的区别

1. 如果条件判断从来没有满足过，那么 for 循环和 while 循环将会执行 0 次，但是 do-while 循环会执行至少一次。
2. for 循环的变量在小括号当中定义，只有循环内部才可以使用。while 循环和 do-while 循环初始化语句本来就在循环外定义变量，所以出来循环结束后还可以继续使用。

### 跳出语句

###  `break` 语句

使用场景：终止 `switch` 或循环

1. 可以用在 switch 语句当中，一旦执行，整个 switch 语句立刻结束。
2. 还可以用在循环语句当中，一旦执行，整个循环语句立刻结束。打断循环。

###  `continue` 语句

使用场景：结束本次循环，继续下一次循环

### 死循环

永远停不下来的循环，叫做死循环。

死循环的标准格式：

```java
while (true) {
    循环体;
}
```

### 循环嵌套

所谓嵌套循环，是指一个循环的循环体内包含另一个循环。比如 for 循环里面还有一个 for 循环，就是嵌套循环。

 `总共的循环次数 = 外循环次数 * 内循环次数` 。

# 方法

方法（Method）就是若干语句的功能集合。

## 定义方法

定义方法的格式：

```java
修饰符 返回值类型 方法名(参数类型 参数名, ...) {
    方法体;
    [return 返回值;]
}
```

- 当一个方法需要一些数据条件，才能完成任务的时候，就有参数。
- 一个方法不需要任何数据条件，自己就能独立完成任务，就无参数。
- 返回值类型：必须要和 return 语句返回值的类型相同，否则编译失败 。
- 不能在 return 后面写代码，return 意味着方法结束，所有后面的代码永远不会执行，属于无效代码。

## 调用方法

方法的三种调用格式：

1. 单独调用： `方法名(参数);` 
2. 打印调用： `System.out.println(方法名(参数));`
3. 赋值调用： `数据类型 变量名 = 方法名(参数);` 

注意：返回值类型为 void 的方法只能单独调用，不能进行打印调用和赋值调用

## 注意事项

1. 方法应该定义在类当中，但是不能在方法当中再定义方法。
2. 方法定义的前后顺序无所谓。
3. 方法定义之后不会执行，如果希望执行，一定要调用。
4. 如果方法有返回值，那么必须写上 `return 返回值;` ，不能没有。
5. return 后面的返回值数据，必须和方法的返回值类型，对应起来。
6. 对于一个 void 方法，不能写 return 后面的返回值，只能写 `return;` 。
7. 对于 void 方法当中最后一行的 return 可以省略不写。
8. 一个方法当中可以有多个 return 语句，但是必须保证同时只有一个会被执行到，两个 return 不能连写。

## 方法重载

**方法重载（Overload）**：指在同一个类中，允许存在一个以上的**同名方法**，只要它们的**参数列表不同**即可，**与参数名称、修饰符和返回值类型无关**。

- 好处：只需要记住唯一一个方法名称，就可以实现类似的多个功能。
- 参数列表：**个数**不同，**数据类型**不同，**多类型顺序**不同。
- 重载方法调用：JVM 通过方法的参数列表，调用不同的方法。

# 数组

## 数组概念

数组的概念：是一种容器，可以同时存放多个数据值。

数组的特点：

1. 数组是一种引用数据类型
2. 数组当中的多个数据，类型必须统一
3. **定长**特性：数组的长度在程序运行期间不可改变

## 数组的初始化

数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。

两种常见的初始化方式：

1. 动态初始化（指定长度）
2. 静态初始化（指定内容）

### 动态初始化数组

动态初始化数组的格式：

```java
数据类型[] 数组名 = new 数据类型[数组长度];
```

使用动态初始化数组时，其中的元素将在自动拥有一个默认值。规则如下：

- 如果是整数类型，默认值为 `0` 
- 如果是浮点数类型，默认值为 `0.0` 
- 如果是字符类型，默认值为 `\u0000` （不可见字符）
- 如果是布尔类型，默认值为 `false` 
- 如果是引用类型，默认值为 `null` 

### 静态初始化数组

静态初始化数组的格式：

```java
数据类型[] 数组名 = new 数据类型[] {元素1,元素2, 元素3, ...};	// 标准格式

数据类型[] 数组名 = {元素1,元素2, 元素3, ...};	// 省略格式
```

注意事项：

1. 静态初始化没有直接指定长度，但是仍然会自动推算得到长度。
2. 动态初始化和静态初始化标准格式可以拆分成为 `声明数组` 和 `创建数组` 两个步骤。
3. 静态初始化一旦使用省略格式，就不能拆分成为两个步骤来写了，但依然隐含了 new 操作。

## 数组元素的访问

**数组索引**： 每一个存储到数组的元素，都会自动的拥有一个编号， `从 0 开始，一直到数组长度减 1 为止` ，这个自动编号称为数组索引（index），可以通过数组的索引访问到数组中的元素。

访问数组元素的格式：

```java
数组名[索引]
```

索引访问数组中的元素：

- `数组名[索引] = 数据值` ，为数组中的元素赋值
- `变量名 = 数组名[索引]` ，获取出数组中的元素

## 数组的内存原理

内存是用于程序运行的临时存储区域，程序运行完毕后会清空内存。

Java 虚拟机为了提高运算效率，对内存空间进行了不同区域的划分：

| 区域名称                          | 作用                                        |
| --------------------------------- | ------------------------------------------- |
| 寄存器（PC Register）             | 与 CPU 相关                                 |
| 本地方法栈（Native Method Stack） | JVM 在使用操作系统功能的时候使用            |
| 方法区（Method Area）             | 存储 .class 文件，包含方法的信息            |
| 堆（Heap）                        | 存储对象或数组，凡是 new 创建的都存储在堆中 |
| 栈（Stack）                       | 存储方法中的局部变量，方法一定在栈中运行    |

数组名称：存储数组**内存地址哈希值**。

 `数组A = 数组B` 将数组 A 的引用赋值给数组 B，结果数组 A 和 B 将会指向同一片内存空间。

有两个独立数组的内存图如下：

![](Java基础\有两个独立数组的内存图.png)

## 数组操作的常见异常

### 数组越界异常

如果访问数组元素的时候，索引编号并不存在，程序运行后，将会抛出 `ArrayIndexOutOfBoundsException` 数组越界异常。

### 数组空指针异常

所有的引用类型变量，都可以赋值为一个 null 值，但是代表其中什么都没有。

数组必须进行 new 初始化才能使用其中的元素。如果只是赋值了一个 null，没有进行 new 创建，那么将会发生 `NullPointerException` 空指针异常。

## 数组的长度

每个数组都具有长度，而且是固定的。

Java 中赋予了数组的一个属性，可以获取到数组的长度，语句为： `数组名.length` ，属性 length 的执行结果是数组的长度，int 类型结果。

数组一旦创建，程序运行期间，长度不可改变。

## 遍历数组

数组遍历： 将数组中的每个元素分别获取出来，就是遍历。

遍历也是数组操作中的基石。

数组的索引是 `0` 到 `lenght-1` ，可以作为循环的条件出现。

```java
public static void main(String[] args) {
	int[] array = { 1, 2, 3, 4, 5 };
	for (int i = 0; i < array.length; i++) {
		System.out.println(array[i]);
	}
}
```

## 数组作为方法参数和返回值

一个方法**可以有0、1 或多个参数**；但是只能有0或者1个返回值，**不能有多个返回值**。

任何数据类型都能作为方法的参数类型或返回值类型。

- 数组作为方法参数传递，传递的参数是数组内存的地址。
- 数组作为方法的返回值，返回的其实也是数组的地址值。

## 方法的参数类型区别

- **方法的参数为基本类型时，传递的是数据值。** 
- **方法的参数为引用类型时，传递的是地址值。** (String), 原创(String), Java 语言是美国 Sun 公司（Stanford University Network），在 1995 年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean)
2020-08-08 21:19:05.333 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : <==      Total: 1
2020-08-08 21:19:05.333 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE title = ? AND content = ? AND flag = ? AND description = ? AND views = ? AND appreciation = ? AND comment = ? AND publish = ? AND recommend = ?
2020-08-08 21:19:05.335 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : ==> Parameters: Java面向对象(String), ---
title: Java面向对象
date: 2020-01-15 15:13:22
id: java-object-oriented
categories:
	- JavaSE
	- Java面向对象
tags:
	- JavaSE
	- Java面向对象
mathjax: 

---

# 面向对象思想

## 概述

Java 语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用 Java 语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。

面向对象思想就是在计算机程序设计过程中，参照现实中事物，**将属性特征、行为特征抽象出来，描述成计算机事件**的设计思想。 它区别于面向过程思想，**强调的是通过调用对象的行为来实现功能**，而不是自己一步一步的去操作实现。



## 特点

面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了**三大基本特征，即封装、继承和多态。**

# 类和对象

## 什么是类和对象

**类**：是一组相关**属性**和**行为**的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。

- **属性**：就是该事物的状态信息。
- **行为**：就是该事物能够做什么。

**对象**：是一类事物的具体体现。对象是**类的一个实例**，必然具备该类事物的属性和行为。

类和对象的关系：

- 类是对一类事物的描述，是**抽象**的。
- 对象是一类事物的实例，是**具体**的。
- **类是对象的模板，对象是类的实例。**

## 类的定义

Java 中用类（`class`） 来描述事物：

- **成员变量**（属性）
- **成员方法**（行为）

类的定义格式：

```java
public class ClassName {
    // 成员变量
    // 成员方法
}
```

注意事项：

1. 成员变量直接定义在**类中、方法外**；
2. 成员方法**不加 static 关键字**。

## 对象的使用

通常情况下，一个类不能直接使用，需要根据类创建一个对象才能使用。

创建对象：

```java
ClassName objectName  = new ClassName();
```

使用对象访问类中的成员：

```java
objectName.成员变量名
objectName.成员方法名(参数)
```

成员变量的默认值：

| 数据类型                       | 默认值 |
| ------------------------------ | ------ |
| 整数（byte、short、int、long） | 0      |
| 浮点数（float、double）        | 0.0    |
| 字符（char）                   | \u0000 |
| 布尔（boolean）                | false  |
| 引用（数组、类、接口）         | null   |

## 对象内存原理

- 创建的对象存储在堆内存中
    - 成员变量
    - 成员方法标记值（成员方法的地址值）
- 类的信息存储在方法区中
    - 成员方法的信息
- 程序运行在栈内存中
    - main 方法首先入栈，最后出栈
        - 局部变量
        - 引用变量（对象地址值）
    - 成员方法不断压栈和出栈
        - 局部变量

只有一个对象的内存图如下：

![](Java面向对象/只有一个对象的内存图.png)

## 使用对象类型作为方法的参数和返回值

引用类型作为参数和返回值时，传递的都是地址值。

## 成员变量和局部变量的区别

变量根据**定义位置的不同**分成成员变量和局部变量两种：

```java
public class ClassName {
    数据类型 成员变量名;	// 成员变量
    public void methodName() {
        数据类型 局部变量名;	// 局部变量
    }
}
```

- 在类中的位置不同
    - 成员变量：类中、方法外
    - 局部变量：方法中或者方法声明中（形式参数）
- 作用范围不同
    - 成员变量：类中
    - 局部变量：方法中
- 初始化值不同
    - 成员变量：有默认值
    - 局部变量：没有默认值，必须定义后赋值才能使用
- 在内存中的位置不同
    - 成员变量：堆内存
    - 局部变量：栈内存
- 生命周期不同
    - 成员变量：随着对象的创建而存在，随着对象的消失而消失
    - 局部变量：随着方法的调用而存在，随着方法调用完毕而消失

# 封装

## 概述

面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。

封装就是将一些细节信息隐藏起来，对于外界不可见。封装性在 Java 当中的体现：

1.  `方法` 就是一种封装：调用者只知道方法会完成什么功能，并不知道功能具体是如何实现的。
2.  关键字 `private` 也是一种封装：将类的属性隐藏起来，若需要访问某个属性，提供公共方法对其访问。

##  `private` 关键字

 `private` 的含义：

- private 是一个**权限修饰符**，代表最小权限，可以修饰成员变量和成员方法。
- 被 private 修饰后的成员变量和成员方法，**在本类当中仍可以随意访问**，但是超出了本类范围之外就不能再直接访问了。

间接访问 private 成员变量：定义 `getXxx` 方法和 `setXxx` 方法

- Getter 方法：不能有参数，返回值类型和成员变量对应
- Setter 方法：不能有返回值，参数类型和成员变量对应
- 对于基本类型当中的 boolean 值，Getter 方法一定要写成 `isXxx` 的形式，而 setXxx 规则不变

## `this` 关键字

当方法的局部变量和类的成员变量重名的时候，根据“就近原则”，会优先使用局部变量，导致成员变量被隐藏，无法访问成员变量。

如果需要访问本类当中的成员变量，需要使用 `this` 关键字。使用格式为：

```java
this.成员变量名
```

使用 this 关键字代表所在类的当前对象的引用（地址值），即对象自己的引用。**谁在调用，谁就是this。** 

## 构造方法

当我们**通过关键字 new 来创建对象时，其实就是在调用构造方法。**构造方法专门用来初始化对象，给对象的成员变量赋初始值。

构造方法的格式：

```java
public ClassName(参数类型 参数名称, ...) {
    方法体;
}
```

- 构造方法的名称必须与所在类的类名完全一致
- 构造方法**没有返回值类型**，也不能返回一个值
- 如果没有自定义构造方法，编译器会默认提供一个**无参构造方法** `public ClassName() {}` 
- 一旦自定义构造方法，编译器不再提供默认的无参构造方法
- 构造方法可以重载

## 标准的类（JavaBean）

一个标准的类通常要满足下面的条件：

1. 类是具体的和公共的；
2. 所有的成员变量都使用 private 关键字修饰；
3. 为每一个成员变量都提供一对 Getter/Setter 方法；
4. 必须具有一个无参数的构造方法；
5. 建议具有一个全参数的构造方法；

这样的标准规范也叫做 `Java Bean` 规范，格式如下：

```java
public class ClassName{
    //成员变量
    //构造方法，无参构造方法【必须】，有参构造方法【建议】
    //成员方法
    //getXxx()
    //setXxx()
}
```

# 继承

多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。其中，多个类可以称为 **`子类`** ，单独那一个类称为 **`父类`** 、超类（superclass）或者基类。

**继承**：就是子类继承父类的**属性和行为**，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。

继承描述的是事物之间的所属关系，这种关系是 **`is-a`** 的关系。“子类就是一个父类”，也就是说，子类可以被当做父类看待。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。

## `extends` 关键字

通过 `extends` 关键字，可以声明一个子类继承另外一个父类，定义格式如下：

```java
class 父类 {
    ...
}

class 子类 extends 父类 {
    ...
}
```

## 继承后的成员变量

### 成员变量的访问

在父子类的继承关系当中：

- 如果成员变量**不重名**，这时的访问是没有影响的
- 如果成员变量**重名**，则创建子类对象时，访问有两种方式：
    - **直接**通过子类对象访问成员变量： `等号左边是谁，就优先用谁，没有则向上找。` 
    - **间接**通过成员方法访问成员变量： `该方法属于谁，就优先用谁，没有则向上找。` 

###  `super` 关键字

当子类和父类中出现了同名的成员变量时，如果在子类中需要访问父类中非私有成员变量，需要使用 `super` 关键字修饰父类成员变量，类似于 `this` 。

### 访问重名的三种变量

访问重名的局部变量、本类成员变量和父类成员变量：

- 局部变量： `直接写成员变量名` 
- 本类的成员变量： `this.成员变量名` 
- 父类的成员变量： `super.成员变量名` 

## 继承后的成员方法

### 成员方法的调用

在父子类继承关系中：

- 如果成员方法不重名，这时的调用是没有影响的， `创建的对象是谁，就优先用谁，如果没有则向上找。` 
- 如果成员方法重名，这是的访问是一种特殊情况，叫做 **方法重写（Override）** 。

### 方法重写

**方法重写** ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果。即方法的**声明不变，重新实现。** 

- 特点：创建的是子类对象，则优先用子类方法。
- 注意事项：
    1. 必须保证父子类之间方法的名称相同，参数列表也相同； `@Override` 
    2. 子类方法的返回值必须**小于等于**父类方法的返回值范围；
    3. 子类方法的权限必须**大于等于**父类方法的权限修饰符。 `public > protected > (default) > private` 

## 继承后的构造方法

构造方法的格式和作用：

- 构造方法是与类名一致的，所以子类无法继承父类的构造方法。
- 构造方法是用来初始化成员变量的，所以在子类的初始化过程中，必须先执行父类的初始化动作。

继承关系中，父子类构造方法的访问特点：

1. 子类构造方法当中有一个默认隐含的 `super()` 调用，所以一定是先调用的父类构造方法，后执行的子类构造方法。
2. 子类构造方法可以通过 `super` 关键字来调用父类重载的构造方法。
3. super 的父类构造方法调用，必须是子类构造方法的第一个语句。
4. 不能一个子类构造方法调用多次 super 构造方法。

总结：子类构造方法必须调用父类构造方法，不写则隐含 super()；写了则调用写的指定的 super 调用。super 只能有一个，且必须是第一个。

##  `super` 与 `this` 

### 父类空间优先于子类对象产生

在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于**子类对象中包含了其对应的父类空间**，便可以包含其父类的成员，如果父类成员非 private 修饰，则子类可以随意使用父类成员。代码体现在子类的构造方法调用时，一定先调用父类的构造方法。

-  `super`  ：代表父类的存储空间标识。
-  `this`  ：代表当前对象的引用。

super 与 this 的内存图示如下：

![](Java面向对象/super与this的内存图.png)



### 含义与用法总结

 `super` 关键字用来访问父类内容，用法有三种：

1. 在子类的成员方法中，访问父类的成员变量。
2. 在子类的成员方法中，访问父类的成员方法。
3. 在子类的构造方法中，访问父类的构造方法。


 `this` 关键字用来访问本类内容，用法也有三种：

1. 在本类的成员方法中，访问本类的成员变量。
2. 在本类的成员方法中，访问本类的另一个成员方法。
3. 在本类的构造方法中，访问本类的另一个构造方法。

注意事项： `this(...)` 和 `super(...)` 调用都必须是构造方法的第一个语句，且是唯一一个，因此 super 和 this 两种构造方法调用不能同时使用。

```java
public class Fu {
	int num = 30;
}

public class Zi extends Fu {
    int num = 20;
    
    public Zi() {
        // super(); // 这一行不再默认添加
        this(123); // 本类的无参构造，调用本类的有参构造
        // this(1, 2); // 错误写法！
    }
    
    public Zi(int n) {
        this(1, 2);
    }
    
    public Zi(int n, int m) {
        // 隐含super();
    }

    public void showNum() {
        int num = 10;
        System.out.println(num); // 局部变量
        System.out.println(this.num); // 本类中的成员变量
        System.out.println(super.num); // 父类中的成员变量
    }

    public void methodA() {
        System.out.println("AAA");
    }

    public void methodB() {
        this.methodA();
        System.out.println("BBB");
    }
}
```

## 继承的特点

1. 继承主要解决的问题是**`共性抽取`**。
2. Java 只支持 **`单继承`** ，不支持多继承。一个类的直接父类只能有唯一一个。
3. Java 支持 **`多级继承`** 。所有类都默认继承 `java.lang.Object` 类。
4. 一个类的直接父类是唯一的，但是一个父类可以拥有多个子类。
5. 子类可以拥有父类的内容，还可以拥有自己的专属内容。

# 抽象类

父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法体，只有声明还有意义，而方法体则没有存在的意义了。我们把**没有方法体的方法称为抽象方法**。Java语法规定，**包含抽象方法的类就是抽象类。** 

##  `abstract` 关键字

抽象方法定义格式：

```java
修饰符 abstract 返回值类型 方法名();
```

抽象类定义格式：

```java
修饰符 abstract 类名 {
    ...
}
```

## 抽象方法和抽象类的使用

如何使用抽象类和抽象方法：

1. 不能直接创建 new 抽象类对象。
2. 必须用一个子类来继承抽象父类。
3. 子类必须重写抽象父类当中所有的抽象方法。
4. 创建子类对象进行使用。

继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该父类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，失去意义。

此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做实现方法。

## 注意事项

1. 抽象类不能创建对象。
2. 抽象类中可以有构造方法，是供子类创建对象时，初始化父类成员使用的。
3. 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。
4. 抽象类的子类必须重写抽象父类中所有的抽象方法，否则该子类也是抽象类。

# 接口

## 接口概述

接口就是**多个类的公共规范**，是一种**引用数据类型**。

如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是**封装了方法**，包含`常量`、`抽象方法`（JDK 7 及以前）、`默认方法`、`静态方法`（JDK 8）、`私有方法` （JDK 9）。

## 接口的定义

接口的定义方式，与类的定义方式相似，但是使用 **`interface` 关键字**。它也会被编译成 .class 文件，但一定要明确它并不是类，而是另外一种引用数据类型。

```java
public interface 接口名称 {
    // 常量
    // 抽象方法
    // 默认方法
    // 静态方法
    // 私有方法
}
```

### 含有抽象方法

在任何版本的 Java 中，接口都能定义抽象方法，格式如下：

```java
[public] [abstract] 返回值类型 方法名称(参数列表);
```

注意事项：

1. 接口当中的抽象方法，修饰符必须是两个固定的关键字： `public abstract` ；
2. 这两个关键字修饰符，可以选择性地省略；
3. 方法的三要素（方法名、返回值、参数列表）可以随意定义。

```java
public interface MyInterfaceAbstract {
    // 这是一个抽象方法
    public abstract void methodAbs1();
    // 这也是抽象方法
    abstract void methodAbs2();
    // 这也是抽象方法
    public void methodAbs3();
    // 这也是抽象方法
    void methodAbs4();
}
```

### 含有默认方法

从 Java 8 开始，接口中允许定义**默认方法**，用来解决接口升级所导致的原有实现类未实现新添加抽象方法而报错的问题，为修改接口而不破坏原来的实现类的结构提供了便利。

默认方法使用 **`default` 关键字**。

```java
[public] default 返回值类型 方法名称(参数列表) {
    // 方法体
}
```

- 实现类继承了接口的**默认方法，既可以直接调用，也可以重写**。
- **一个声明在类里面的方法优先于任何默认方法**，优先选取最具体的实现。
- 默认方法**不能重写 `Object` 中的方法，但是可以重载 `Object` 中的方法**。

### 含有静态方法

从 Java 8 开始，接口中允许声明**静态方法**，并且可以实现，用 **`static` 关键字**修饰。

```java
[public] static 返回值类型 方法名称(参数列表) {
    // 方法体
}
```

- 不能通过接口实现类的对象来调用接口中的静态方法。
- 通过接口名称直接调用其中的静态方法，格式：`接口名称.静态方法名(参数);` 

### 含有私有方法

当需要抽取一个共有方法用来解决多个默认方法或静态方法之间的重复代码问题时，这个共有方法不应该让实现类使用，应该是私有化的。

从 Java 9 开始，接口当中允许定义**私有方法**，使用 **`private` 关键字**修饰。

```java
private [static] 返回值类型 方法名称(参数列表) {
    // 方法体
}
```

- 普通私有方法：解决多个默认方法之间重复代码问题，只有默认方法可以调用
- 静态私有方法：解决多个静态方法之间重复代码问题，只有静态方法可以调用

### 含有常量

接口当中也可以定义“成员变量”，但是**默认使用 `public static final` 三个关键字进行修饰**。从效果上看，这其实就是接口的 **`常量`**，不可改变。

```java
[public] [static] [final] 数据类型 常量名称 = 数据值;
```

注意事项：

1. 接口当中的常量可以省略 public static final。
2. 接口当中的常量**必须赋值**。
3. 接口中常量的名称，使用完全大写的字母，用下划线进行分隔。（推荐命名规则）

## 接口的实现

### 基本的实现

类与接口的关系为实现关系，即**类实现接口**，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 **`implements` 关键字**。

```java
public class 实现类名称 implements 接口名称 {
    // 重写接口中的抽象方法【必须】
    // 重写接口中的默认方法【可选】
}
```

接口的使用步骤：

1. 接口不能直接使用，需要有一个 `实现类` 来 `实现` 该接口；
2. 接口的实现类必须重写（实现）接口中所有的抽象方法；
3. 创建实现类的对象，进行使用。

注意事项：

- 如果实现类并没有重写接口中所有的抽象方法，那么这个类就必须是**抽象类**。
- 接口是**没有静态代码块和构造方法**的。

### 接口的多实现

在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的**多实现**。

实现格式：

```java
public class 类名 [extends 父类名] implements 接口名1, 接口名2, ... {
    // 重写接口中的抽象方法【必须】
    // 重写接口中的默认方法【不重名时可选】
}
```

注意事项：

- 一个类能**继承一个直接父类，同时实现多个接口。** 
- 如果实现类所实现的多个接口中存在重复的抽象方法，那么实现类**只需要重写一次重复的抽象方法。** 
- 如果实现类没有重写多有接口中的所有抽象方法，那么实现类必须是一个抽象类。
- 如果实现类所实现的多个接口中存在重复的默认方法，那么实现类**必须对重复的默认方法进行重写。** 
- 如果**直接父类中的方法和接口中的默认方法发生冲突，优先使用父类中的方法。** 

## 接口的多继承

一个接口能继承另一个或者多个接口，这和类之间的继承比较相似。

接口的继承使用 `extends` 关键字，子接口继承父接口的方法。 

```java
// 定义父接口A
interface A {
    public default void method() {
        System.out.println("父接口A");
    }
}

// 定义父接口A
interface B {
    public default void method() {
        System.out.println("父接口B");
    }
}

// 定义子接口C
interface C extends A, B {
    @Override
    public default void method() {
        System.out.println("子接口C");
    }
}
```

注意事项：

1. 多个父接口中的抽象方法重复，没有影响；
2. 多个父接口中的默认方法重复，那么子接口必须进行默认方法的重写，而且不能省略 `default` 关键字。（注意：实现类重写多个接口的重复默认方法时必须去掉 `default` 关键字！）

## 类和接口相关的几种关系

1. 类与类之间是单继承的。
2. 类与接口之间是多实现的。
3. 接口与接口之间是多继承的。

# 多态

## 多态概述

`多态` 是继封装、继承之后，面向对象的第三大特性，是指同一行为具有多种不同的表现形式。

**继承（extends）或实现（implements）是多态性的前提。**一个对象拥有多种形态，这就是对象的多态性。

## 多态的体现

多态性的格式体现就是**父类引用指向子类对象**。

```java
父类类型 对象名 = new 子类类型();
```

- 父类类型，指子类对象继承的父类类型，或者实现的父接口类型。
- 当使用多态方式调用方法时，首先检查父类中是否具有该方法，如果没有，则编译报错；如果有，则**执行子类重写后的方法**。

## 多态中的成员变量与成员方法

访问成员变量的两种方式：

1. 直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。
2. 间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。

```java
public class Fu {
    int num = 10;

    public void showNum() {
        System.out.println(num);
    }
}

public class Zi extends Fu {
    int num = 20;
    int age = 16;

    @Override
    public void showNum() {
        System.out.println(num);
    }
}

public class MultiField {
    public static void main(String[] args) {
        // 使用多态的写法，父类引用指向子类对象
        Fu obj = new Zi();
        
        System.out.println(obj.num); // 父：10
        // System.out.println(obj.age); // 错误写法！

        // 子类没有重写，就是父：10
        // 子类如果重写，就是子：20
        obj.showNum();
    }
}
```

调用成员方法的规则是：看 new 的是谁，就优先用谁，没有则向上找。

```java
public class Fu {
    public void method() {
        System.out.println("父类方法");
    }

    public void methodFu() {
        System.out.println("父类特有方法");
    }
}

public class Zi extends Fu {
    @Override
    public void method() {
        System.out.println("子类方法");
    }

    public void methodZi() {
        System.out.println("子类特有方法");
    }
}

public class MultiMethod {
    public static void main(String[] args) {
        Fu obj = new Zi(); // 多态

        obj.method(); // 父子都有，优先用子
        obj.methodFu(); // 子类没有，父类有，向上找到父类

        // 编译看左边，左边是Fu，Fu当中没有methodZi方法，所以编译报错。
        // obj.methodZi(); // 错误写法！
    }
}
```

访问成员变量与调用成员方法的对比：

- 成员变量：编译看左边，运行还看左边。
- 成员方法：编译看左边，运行看右边。

## 引用类型转换

### 对象的向上转型

**向上转型**：多态本身就是子类类型向父类类型转换的过程，这个过程是默认的。 

- 格式： `父类名称 对象名 = new 子类名称();` 
- 含义：创建一个子类对象，把它当做父类来看待使用。
- 注意：向上转型一定是安全的，类似于基本数据类型中的自动类型转换。

### 对象的向下转型

对象一旦向上转型为父类类型，就无法调用子类原本特有的内容，所以需要将对象还原为子类类型。

**向下转型**：父类类型向子类类型转换的过程，这个过程是强制的。 

- 格式： `子类名称 对象名 = (子类名称)父类对象` 
- 含义：将父类对象**还原**为本来的子类对象。
- 注意：如果对象不属于要还原的类型，运行时就会抛出 `ClassCastException` 异常。类似于基本数据类型中的强制类型转换。

##  `instanceof` 关键字

为了避免 `ClassCastException` 的发生，Java 提供了 `instanceof` 关键字，给引用变量做类型校验，用来判断父类对象是否是某个引用类型的实例。

```java
对象名 instanceof 引用数据类型
```

这将得到一个 boolean 值结果。

#  `final` 关键字

##  `final` 概述

子类可以在父类的基础上改写父类内容，比如，方法重写。那么我们能不能随意的继承 API 中提供的类，改写其内容呢？显然这是不合适的。为了避免这种随意改写继承的 API 中提供的类的内容的情况，Java 提供了 **`final` 关键字**，用于修饰**不可改变**内容。 

- `final` ：代表最终，不可改变，可用于修饰 `类` 、`方法` 和 `变量`。
    - 类：被修饰的类，不能被继承。
    - 方法：被修饰的方法，不能被重写。
    - 变量：被修饰的变量，不能被重新赋值。

##  `final` 的使用方式

### 修饰类

```java
public final class 类名 {
    ...
}
```

- 含义：当前这个类不能有任何的子类。
- 注意：一个类如果是 final 的，那么其中所有的成员方法都无法进行重写（因为没有子类）。

### 修饰方法

```java
修饰符 final 返回值类型 方法名(参数列表) {
    // 方法体
}
```

- 含义：当前这个方法是最终方法，不能被重写。
- 注意：对类、方法来说，`abstract` 关键字和 `final` 关键字不能同时使用，因为二者的含义矛盾。

### 修饰变量

#### 修饰局部变量

基本类型的局部变量，被 final 修饰后，**只能赋值一次**，不能再更改。

```java
public class FinalFieldDemo1 {
    public static void main(String[] args) {
        // 声明变量，使用final修饰
        final int a;
        // 第一次赋值
        a = 10;
        // 第二次赋值
        // a = 20; // 报错,不可重新赋值
        
        // 声明变量，直接赋值，使用final修饰
        final int b = 10;
        // 第二次赋值
        // b = 20; // 报错,不可重新赋值
    }
}
```

引用类型的局部变量，被 final 修饰后，只能指向一个对象，**地址不能再更改，但是不影响对象内部的成员变量值的修改**。

```java
public class FinalFieldDemo2 {
    public static void main(String[] args) {
        // 创建 User 对象
        final User u = new User();
        
        // 创建 另一个 User对象
        // u = new User(); // 报错，指向了新的对象，地址值改变。
        
        // 调用setName方法
        u.setName("张三"); // 可以修改
    }
}
```

#### 修饰成员变量

对于成员变量来说，如果使用 final 关键字修饰，那么这个变量也照样是不可变。

1. 由于成员变量具有默认值，所以用了 final 之后必须手动赋值，不会再给默认值了。
2. 对于 final 的成员变量，要么使用直接赋值，要么通过构造方法赋值，二者选其一。
3. 必须保证类当中所有重载的构造方法，都最终会对 final 的成员变量进行赋值。

```java
public class Person {
    private final String name/* = "鹿晗"*/;

    public Person() {
        name = "关晓彤";
    }

    public Person(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    /*
    public void setName(String name) {
        this.name = name;
    }
    */
}
```

# 访问权限修饰符

## 访问修饰符概述

在 Java 中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限。 

- `public`：公有的
- `protected`：受保护的
- `(default)`：默认的
- `private`：私有的

## 不同权限的访问能力

|              | `public` | `protected` | `(default)` | `private` |
| :----------- | :------: | :---------: | :---------: | :-------: |
| 同一类       |    √     |      √      |      √      |     √     |
| 同一包       |    √     |      √      |      √      |           |
| 不同包子类   |    √     |      √      |             |           |
| 不同包无关类 |    √     |             |             |           |

编写代码时，如果没有特殊的考虑，建议这样使用权限： 

- 成员变量使用 `private`，隐藏细节。 
- 构造方法使用 `public`，方便创建对象。 
- 成员方法使用 `public`，方便调用方法。 

# 内部类

## 内部类概述

如果一个事物包含另一个事物，就对应着一个类包含另一个类。例如：身体和心脏的关系，汽车和发动机的关系。

将一个类 A 定义在另一个类 B 里面，类 A 就称为 **`内部类`**，B 则称为 **`外部类`**。 

内部类的分类：

- 成员内部类
- 局部内部类（包含匿名内部类）

## 成员内部类

`成员内部类` ：定义在**类中方法外**的类。

```java
修饰符 class 外部类名称 {
    修饰符 class 内部类名称 {
        // ...
    }
    // ...
}
```

### 访问特点

- 内部类可以**直接访问外部类的成员**，包括私有成员。
- 外部类要访问内部类的成员，必须要**创建内部类对象**。

### 使用方式

1. 间接方式：在外部类方法中创建内部类对象，在 main 方法中调用外部类方法。
2. 直接方式：在 main 方法中直接创建内部类对象。

创建内部类对象的格式：

```java
外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();
```

```java
public class Body { // 外部类
    public class Heart { // 成员内部类
        // 内部类的方法
        public void beat() {
            System.out.println("心脏跳动：蹦蹦蹦！");
            System.out.println("我叫：" + name); // 正确写法！
        }
    }
    
    // 外部类的成员变量
    private String name;
    
    // 外部类的方法
    public void methodBody() {
        System.out.println("外部类的方法");
        new Heart().beat();
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
}

public class Demo01InnerClass {
    public static void main(String[] args) {
        Body body = new Body(); // 外部类的对象
        // 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart
        body.methodBody();
        
        // 直接按照格式创建内部类对象
        Body.Heart heart = new Body().new Heart();
        heart.beat();
    }
}
```

### 同名变量访问

如果外部类成员变量、内部类成员变量和局部变量同名：

- 通过 `变量名` 访问局部变量
- 通过 `this.变量名` 访问内部类成员变量
- 通过 `外部类名称.this.变量名` 访问外部类成员变量（注意：没有继承关系，不能用 super）

```java
public class Outer {
    int num = 10; // 外部类的成员变量
    public class Inner /*extends Object*/ {
        int num = 20; // 内部类的成员变量
        public void methodInner() {
            int num = 30; // 内部类方法的局部变量
            System.out.println(num); // 局部变量，就近原则
            System.out.println(this.num); // 内部类的成员变量
            System.out.println(Outer.this.num); // 外部类的成员变量
        }
    }
}
```

## 局部内部类

`局部内部类` ：定义在方法内部的类。

“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。

```java
修饰符 class 外部类名称 {
    修饰符 返回值类型 外部类方法名称(参数列表) {
        class 局部内部类名称 {
            // ...
        }
    }
}
```

### 使用方式

在外部类方法中创建局部内部类对象来使用。

```java
class Outer {
    public void methodOuter() {
        class Inner { // 局部内部类
            int num = 10;
            public void methodInner() {
                System.out.println(num); // 10
            }
        }
        // 创建局部内部类对象
        Inner inner = new Inner();
        inner.methodInner();
    }
}
```

### 访问 `final` 局部变量

局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是 `有效final` 的。

- 直接声明为 `final` 
- 实际只赋值一次（注意：从 Java 8 开始，只要局部变量事实不变，那么 `final` 关键字可以省略。）

原因：

1. new 出来的对象在堆内存当中。
2. 局部变量是跟着方法走的，在栈内存当中。
3. 方法运行结束之后，立刻出栈，局部变量就会立刻消失。
4. 但是 new 出来的对象会在堆当中持续存在，直到垃圾回收消失。

# 类的权限修饰符小结

定义一个类的时候，权限修饰符规则如下：

1. 外部类：`public` / `(default)` 
2. 成员内部类：`public` / `protected` / `(default)` / `private` 
3. 局部内部类：什么权限修饰符都不能写（注意：不是 default）

# 匿名的使用

## 匿名内部类

如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用 `匿名内部类`。

**匿名内部类** ：是内部类的简化写法。它的本质是一个 `带具体实现的` `父类或者父接口的` `匿名的` **子类对象**。 

匿名内部类的定义格式：

```java
接口名称 对象名 = new 接口名称() {
    // 覆盖重写所有抽象方法
};

抽象类名称 对象名 = new 抽象类名称() {
    // 覆盖重写所有抽象方法
};
```

对格式 `new 父类名称() {...}` 进行解析：

- `new` 代表创建对象的动作
- `父类名称` 就是匿名内部类需要实现的父类类型
- `{...}` 才是匿名内部类的内容

## 匿名对象

创建对象的标准格式：`类名称 对象名 = new 类名称();` 

匿名对象就是只有右边的对象，没有左边的名字和赋值运算符。

```java
new 类名();
```

使用建议：如果确定有一个对象只需要使用唯一的一次，就可以用匿名对象。

使用场景：

1. 创建匿名对象直接调用方法，没有变量名。
2. 匿名对象可以作为方法的参数和返回值。

## 注意事项

1. 匿名内部类，在**创建对象**的时候，只能使用唯一一次。
    如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。
2. 匿名对象，在**调用方法**的时候，只能调用唯一一次。
    如果希望同一个对象，调用多次方法，那么必须给对象起个名字。
3. 匿名内部类是**省略了实现类/子类名称**，但是匿名对象是**省略了对象名称**。
    强调：匿名内部类和匿名对象不是一回事！！！

# 引用类型用法总结

基本类型可以作为成员变量、方法的参数以及方法的返回值，引用类型也可以。

`String` 类型本身就是引用类型，因为它的使用方式类似常量，所以往往忽略了它是引用类型的存在。

## class 作为成员变量

类作为成员变量时，对它进行赋值的操作，实际上，是赋给它该类的一个对象。 

```java
public class Weapon {
    private String code; // 武器的代号

    public Weapon() {
    }

    public Weapon(String code) {
        this.code = code;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }
}

public class Hero {
    private String name; // 英雄的名字
    private int age; // 英雄的年龄
    private Weapon weapon; // 英雄的武器

    public Hero() {
    }

    public Hero(String name, int age, Weapon weapon) {
        this.name = name;
        this.age = age;
        this.weapon = weapon;
    }

    public void attack() {
        System.out.println("年龄为" + age + "的" + name + "用" 
                           + weapon.getCode() + "攻击敌方。");
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Weapon getWeapon() {
        return weapon;
    }

    public void setWeapon(Weapon weapon) {
        this.weapon = weapon;
    }
}

public class DemoMain {
    public static void main(String[] args) {
        // 创建一个英雄角色
        Hero hero = new Hero();
        // 为英雄起一个名字，并且设置年龄
        hero.setName("盖伦");
        hero.setAge(20);

        // 创建一个武器对象
        Weapon weapon = new Weapon("AK-47");
        // 为英雄配备武器
        hero.setWeapon(weapon);

        // 年龄为20的盖伦用AK-47攻击敌方。
        hero.attack();
    }
}
```

## interface 作为成员变量

接口作为成员变量时，对它进行赋值的操作，实际上，是赋给它该接口的一个子类对象。 

```java
public interface Skill {
    void use(); // 释放技能的抽象方法
}

public class Hero {
    private String name; // 英雄的名称
    private Skill skill; // 英雄的技能

    public Hero() {
    }

    public Hero(String name, Skill skill) {
        this.name = name;
        this.skill = skill;
    }

    public void attack() {
        System.out.println("我叫" + name + "，开始释放技能：");
        skill.use(); // 调用接口中的抽象方法
        System.out.println("释放技能完成。");
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Skill getSkill() {
        return skill;
    }

    public void setSkill(Skill skill) {
        this.skill = skill;
    }
}

public class DemoGame {
    public static void main(String[] args) {
        Hero hero = new Hero();
        hero.setName("艾希"); // 设置英雄的名称

        // 设置英雄技能
        // 同时使用匿名内部类和匿名对象
        hero.setSkill(new Skill() {
            @Override
            public void use() {
                System.out.println("Biu~Pia~Biu~Pia~");
            }
        });
        
        /*
        我叫艾希，开始释放技能：
        Biu~Pia~Biu~Pia~
        释放技能完成。
        */
        hero.attack();
    }
}
```

## interface 作为方法参数和返回值类型

- 接口作为参数时，传递它的子类对象。
- 接口作为返回值类型时，返回它的子类对象。

```java
import java.util.ArrayList;
import java.util.List;

/*
java.util.List正是ArrayList所实现的接口。
 */
public class DemoInterface {
    public static void main(String[] args) {
        // 左边是接口名称，右边是实现类名称，这就是多态写法
        List<String> list = new ArrayList<>();

        List<String> result = addNames(list);
        for (int i = 0; i < result.size(); i++) {
            System.out.println(result.get(i));
        }
    }

    public static List<String> addNames(List<String> list) {
        list.add("迪丽热巴");
        list.add("古力娜扎");
        list.add("玛尔扎哈");
        list.add("沙扬娜拉");
        return list;
    }
}
```

# Lambda 表达式

## 函数式编程思想

在数学中，**函数**就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法，**强调做什么，而不是以什么形式做**。

- 面向对象的思想：做一件事情，找一个能解决这个事情的对象，调用对象的方法，完成事情。
- 函数式编程思想：只要能获取到结果，谁去做的，怎么做的都不重要，重视的是结果，不重视过程。

## 冗余的传统代码

给定一个计算器 `Calculator` 接口，内含抽象方法 `calc` 可以将两个 `int` 数字相加得到和值。在测试类中定义一个 `invokeCalc` 方法，完成加法计算。

```java
public interface Calculator {
    public abstract int calc(int a, int b);
}

public class DemoCalculator {
    public static void main(String[] args) {
        // 调用invokeCalc方法,方法的参数是一个接口,可以使用匿名内部类
        invokeCalc(10, 20, new Calculator() {
            @Override
            public int calc(int a, int b) {
                return a + b;
            }
        });
    }
    
    public static void invokeCalc(int a, int b, Calculator c) {
        int sum = c.calc(a, b);
        System.out.println(sum);
    }
}
```

本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个 `Calculator` 接口的匿名内部类对象来明确加法计算内容，再将其传递给 `invokeCalc` 方法使用。

对于 `Calculator` 的匿名内部类用法，可以分析出几点内容：

- `invokeCalc` 方法需要 `Calculator` 接口作为参数，其中的抽象 `calc` 方法明确了两个数的运算方式；
- 为了指定 `calc` 的方法体，**不得不**需要 `Calculator` 接口的实现类；
- 为了省去定义一个 `PlusCalculator` 实现类的麻烦，**不得不**使用匿名内部类；
- 必须覆盖重写抽象 `calc` 方法，所以方法名称、方法参数、方法返回值**不得不**再写一遍，且不能写错；
- 而实际上，**似乎只有方法体才是关键所在**。

## 体验 Lambda 的更优写法

2014 年 3 月 Oracle 所发布的 Java 8（JDK 1.8）中，加入了 **Lambda 表达式**的重量级新特性，为我们打开了新世界的大门。

借助 Java 8 的全新语法，上述 `Calculator` 接口的匿名内部类写法可以通过更简单的 Lambda 表达式达到等效：

```java
public class DemoCalculator {
    public static void main(String[] args) {
        // 使用Lambda表达式简化匿名内部类的书写
        invokeCalc(120, 130, (int a,int b) -> {return a + b;});
    }
}
```

## Lambda 标准格式

Lambda 省去面向对象的条条框框，格式由 **3 个部分**组成：

- 一些参数
- 一个箭头
- 一段代码

```java
(参数列表) -> { 重写方法的代码 }
```

格式说明：

- `()` ：与接口中抽象方法的参数列表一致，没有参数则留空；有参数就写出参数，多个参数使用逗号分隔。
- `->` ：是新引入的语法格式，代表指向动作，是传递的意思，把参数传递给方法体 `{}`。
- `{}`：重写接口的抽象方法的方法体。

## Lambda 省略格式

### 可推导即可省略

Lambda 强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用 Lambda 的省略写法：

```java
public static void main(String[] args) {
    invokeCalc(120, 130, (a, b) -> a + b);
}
```

### 省略规则

在 Lambda 标准格式的基础上，使用省略写法的规则为：

1. 小括号内参数的类型可以省略；
2. 如果小括号内**有且仅有一个参数**，则小括号可以省略；
3. 如果大括号内**有且仅有一个语句**，则无论是否有返回值，都可以省略大括号、`return` 关键字及语句分号。
    注意：要省略 `{}`，`return`，`;` 必须一起省略。

## Lambda 的使用前提

Lambda 的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：

1. 使用 Lambda 必须具有接口，且要求**接口中有且仅有一个抽象方法**。
    - 无论是 JDK 内置的 `Runnable`、`Comparator` 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用 Lambda。
2. 使用 Lambda 必须具有**上下文推断**。
    - 也就是方法的参数或局部变量类型必须为 Lambda 对应的接口类型，才能使用 Lambda 作为该接口的实例。

备注：有且仅有一个抽象方法的接口，称为“**函数式接口**”。(String), 原创(String), Java 语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。(String), 0(Integer), true(Boolean), true(Boolean), true(Boolean), true(Boolean)
2020-08-08 21:19:05.344 DEBUG 11572 --- [http-nio-8080-exec-6] com.flexia.mapper.BlogMapper.selectOne   : <==      Total: 1
2020-08-08 21:19:05.344 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:05.344 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.345 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.345 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:05.345 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.346 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:19:05.346 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.346 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.347 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.347 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.347 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:19:05.348 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.348 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:05.348 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.348 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.348 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:05.349 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 2(Integer)
2020-08-08 21:19:05.349 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.349 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:05.349 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 2(Integer)
2020-08-08 21:19:05.350 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:19:05.350 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.350 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 2(Integer)
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:05.351 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.352 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.352 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:05.352 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 5(Integer)
2020-08-08 21:19:05.353 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.353 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:05.353 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 3(Integer)
2020-08-08 21:19:05.353 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:05.354 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.354 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 6(Integer)
2020-08-08 21:19:05.354 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.354 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:05.354 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.355 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.355 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:05.355 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:19:05.355 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.356 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:05.356 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 4(Integer)
2020-08-08 21:19:05.356 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:05.356 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.357 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:19:05.357 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.357 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:05.357 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.358 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.358 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:05.358 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 6(Integer)
2020-08-08 21:19:05.358 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.359 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:05.359 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 5(Integer)
2020-08-08 21:19:05.359 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 1
2020-08-08 21:19:05.359 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:05.360 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 7(Integer)
2020-08-08 21:19:05.360 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:05.360 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:05.360 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:05.361 DEBUG 11572 --- [http-nio-8080-exec-6] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:05.362  INFO 11572 --- [http-nio-8080-exec-6] com.flexia.service.BlogService           : 从redis中获取到博客总数量为：5
2020-08-08 21:19:05.624  INFO 11572 --- [http-nio-8080-exec-10] com.flexia.service.BlogService           : 从redis中获取最新博客
2020-08-08 21:19:06.759 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogMapper.selectByPrimaryKey      : ==>  Preparing: SELECT blog_id,title,content,first_picture,flag,description,views,appreciation,share_statement,comment,publish,recommend,create_time,update_time,type_id,user_id FROM blog WHERE blog_id = ?
2020-08-08 21:19:06.759 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:06.760 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:06.762 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.TypeMapper.selectByPrimaryKey      : ==>  Preparing: SELECT type_id,name FROM type WHERE type_id = ?
2020-08-08 21:19:06.762 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.TypeMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:06.763 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.TypeMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:06.763 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogTagMapper.selectByExample      : ==>  Preparing: SELECT blog_tag_id,blog_id,tag_id FROM blog_tag WHERE ( ( blog_id = ? ) )
2020-08-08 21:19:06.763 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogTagMapper.selectByExample      : ==> Parameters: 1(Integer)
2020-08-08 21:19:06.764 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.BlogTagMapper.selectByExample      : <==      Total: 2
2020-08-08 21:19:06.764 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:06.764 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 1(Integer)
2020-08-08 21:19:06.765 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:06.765 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : ==>  Preparing: SELECT tag_id,name FROM tag WHERE tag_id = ?
2020-08-08 21:19:06.765 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : ==> Parameters: 5(Integer)
2020-08-08 21:19:06.765 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.mapper.TagMapper.selectByPrimaryKey  : <==      Total: 1
2020-08-08 21:19:06.766 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.UserMapper.selectByPrimaryKey      : ==>  Preparing: SELECT user_id,nickname,username,password,email,avatar,type,create_time,update_time FROM user WHERE user_id = ?
2020-08-08 21:19:06.766 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.UserMapper.selectByPrimaryKey      : ==> Parameters: 1(Integer)
2020-08-08 21:19:06.766 DEBUG 11572 --- [http-nio-8080-exec-5] c.f.m.UserMapper.selectByPrimaryKey      : <==      Total: 1
2020-08-08 21:19:06.970  INFO 11572 --- [http-nio-8080-exec-5] com.flexia.service.BlogService           : 从redis中获取最新博客
